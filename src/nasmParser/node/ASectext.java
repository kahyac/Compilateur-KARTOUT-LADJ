/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.node;

import nasmParser.analysis.*;

@SuppressWarnings("nls")
public final class ASectext extends PSectext
{
    private TSection _section_;
    private TText _text_;
    private PLglobal _lglobal_;
    private PLinst _linst_;

    public ASectext()
    {
        // Constructor
    }

    public ASectext(
        @SuppressWarnings("hiding") TSection _section_,
        @SuppressWarnings("hiding") TText _text_,
        @SuppressWarnings("hiding") PLglobal _lglobal_,
        @SuppressWarnings("hiding") PLinst _linst_)
    {
        // Constructor
        setSection(_section_);

        setText(_text_);

        setLglobal(_lglobal_);

        setLinst(_linst_);

    }

    @Override
    public Object clone()
    {
        return new ASectext(
            cloneNode(this._section_),
            cloneNode(this._text_),
            cloneNode(this._lglobal_),
            cloneNode(this._linst_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASectext(this);
    }

    public TSection getSection()
    {
        return this._section_;
    }

    public void setSection(TSection node)
    {
        if(this._section_ != null)
        {
            this._section_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._section_ = node;
    }

    public TText getText()
    {
        return this._text_;
    }

    public void setText(TText node)
    {
        if(this._text_ != null)
        {
            this._text_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._text_ = node;
    }

    public PLglobal getLglobal()
    {
        return this._lglobal_;
    }

    public void setLglobal(PLglobal node)
    {
        if(this._lglobal_ != null)
        {
            this._lglobal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lglobal_ = node;
    }

    public PLinst getLinst()
    {
        return this._linst_;
    }

    public void setLinst(PLinst node)
    {
        if(this._linst_ != null)
        {
            this._linst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._linst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._section_)
            + toString(this._text_)
            + toString(this._lglobal_)
            + toString(this._linst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._section_ == child)
        {
            this._section_ = null;
            return;
        }

        if(this._text_ == child)
        {
            this._text_ = null;
            return;
        }

        if(this._lglobal_ == child)
        {
            this._lglobal_ = null;
            return;
        }

        if(this._linst_ == child)
        {
            this._linst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._section_ == oldChild)
        {
            setSection((TSection) newChild);
            return;
        }

        if(this._text_ == oldChild)
        {
            setText((TText) newChild);
            return;
        }

        if(this._lglobal_ == oldChild)
        {
            setLglobal((PLglobal) newChild);
            return;
        }

        if(this._linst_ == oldChild)
        {
            setLinst((PLinst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
