/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.node;

import nasmParser.analysis.*;

@SuppressWarnings("nls")
public final class APopInst extends PInst
{
    private POplabel _oplabel_;
    private TPop _pop_;
    private PAr _ar_;

    public APopInst()
    {
        // Constructor
    }

    public APopInst(
        @SuppressWarnings("hiding") POplabel _oplabel_,
        @SuppressWarnings("hiding") TPop _pop_,
        @SuppressWarnings("hiding") PAr _ar_)
    {
        // Constructor
        setOplabel(_oplabel_);

        setPop(_pop_);

        setAr(_ar_);

    }

    @Override
    public Object clone()
    {
        return new APopInst(
            cloneNode(this._oplabel_),
            cloneNode(this._pop_),
            cloneNode(this._ar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPopInst(this);
    }

    public POplabel getOplabel()
    {
        return this._oplabel_;
    }

    public void setOplabel(POplabel node)
    {
        if(this._oplabel_ != null)
        {
            this._oplabel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oplabel_ = node;
    }

    public TPop getPop()
    {
        return this._pop_;
    }

    public void setPop(TPop node)
    {
        if(this._pop_ != null)
        {
            this._pop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pop_ = node;
    }

    public PAr getAr()
    {
        return this._ar_;
    }

    public void setAr(PAr node)
    {
        if(this._ar_ != null)
        {
            this._ar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._oplabel_)
            + toString(this._pop_)
            + toString(this._ar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._oplabel_ == child)
        {
            this._oplabel_ = null;
            return;
        }

        if(this._pop_ == child)
        {
            this._pop_ = null;
            return;
        }

        if(this._ar_ == child)
        {
            this._ar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._oplabel_ == oldChild)
        {
            setOplabel((POplabel) newChild);
            return;
        }

        if(this._pop_ == oldChild)
        {
            setPop((TPop) newChild);
            return;
        }

        if(this._ar_ == oldChild)
        {
            setAr((PAr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
