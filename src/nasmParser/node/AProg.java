/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.node;

import nasmParser.analysis.*;

@SuppressWarnings("nls")
public final class AProg extends PProg
{
    private PLinclude _linclude_;
    private PSecdata _secdata_;
    private PSecbss _secbss_;
    private PSectext _sectext_;

    public AProg()
    {
        // Constructor
    }

    public AProg(
        @SuppressWarnings("hiding") PLinclude _linclude_,
        @SuppressWarnings("hiding") PSecdata _secdata_,
        @SuppressWarnings("hiding") PSecbss _secbss_,
        @SuppressWarnings("hiding") PSectext _sectext_)
    {
        // Constructor
        setLinclude(_linclude_);

        setSecdata(_secdata_);

        setSecbss(_secbss_);

        setSectext(_sectext_);

    }

    @Override
    public Object clone()
    {
        return new AProg(
            cloneNode(this._linclude_),
            cloneNode(this._secdata_),
            cloneNode(this._secbss_),
            cloneNode(this._sectext_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProg(this);
    }

    public PLinclude getLinclude()
    {
        return this._linclude_;
    }

    public void setLinclude(PLinclude node)
    {
        if(this._linclude_ != null)
        {
            this._linclude_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._linclude_ = node;
    }

    public PSecdata getSecdata()
    {
        return this._secdata_;
    }

    public void setSecdata(PSecdata node)
    {
        if(this._secdata_ != null)
        {
            this._secdata_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secdata_ = node;
    }

    public PSecbss getSecbss()
    {
        return this._secbss_;
    }

    public void setSecbss(PSecbss node)
    {
        if(this._secbss_ != null)
        {
            this._secbss_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secbss_ = node;
    }

    public PSectext getSectext()
    {
        return this._sectext_;
    }

    public void setSectext(PSectext node)
    {
        if(this._sectext_ != null)
        {
            this._sectext_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sectext_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._linclude_)
            + toString(this._secdata_)
            + toString(this._secbss_)
            + toString(this._sectext_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._linclude_ == child)
        {
            this._linclude_ = null;
            return;
        }

        if(this._secdata_ == child)
        {
            this._secdata_ = null;
            return;
        }

        if(this._secbss_ == child)
        {
            this._secbss_ = null;
            return;
        }

        if(this._sectext_ == child)
        {
            this._sectext_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._linclude_ == oldChild)
        {
            setLinclude((PLinclude) newChild);
            return;
        }

        if(this._secdata_ == oldChild)
        {
            setSecdata((PSecdata) newChild);
            return;
        }

        if(this._secbss_ == oldChild)
        {
            setSecbss((PSecbss) newChild);
            return;
        }

        if(this._sectext_ == oldChild)
        {
            setSectext((PSectext) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
