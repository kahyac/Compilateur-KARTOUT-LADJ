/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.node;

import nasmParser.analysis.*;

@SuppressWarnings("nls")
public final class AAddress extends PAddress
{
    private POpsizeof _opsizeof_;
    private TBrackopen _brackopen_;
    private PExp _exp_;
    private TBrackclose _brackclose_;

    public AAddress()
    {
        // Constructor
    }

    public AAddress(
        @SuppressWarnings("hiding") POpsizeof _opsizeof_,
        @SuppressWarnings("hiding") TBrackopen _brackopen_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TBrackclose _brackclose_)
    {
        // Constructor
        setOpsizeof(_opsizeof_);

        setBrackopen(_brackopen_);

        setExp(_exp_);

        setBrackclose(_brackclose_);

    }

    @Override
    public Object clone()
    {
        return new AAddress(
            cloneNode(this._opsizeof_),
            cloneNode(this._brackopen_),
            cloneNode(this._exp_),
            cloneNode(this._brackclose_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddress(this);
    }

    public POpsizeof getOpsizeof()
    {
        return this._opsizeof_;
    }

    public void setOpsizeof(POpsizeof node)
    {
        if(this._opsizeof_ != null)
        {
            this._opsizeof_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opsizeof_ = node;
    }

    public TBrackopen getBrackopen()
    {
        return this._brackopen_;
    }

    public void setBrackopen(TBrackopen node)
    {
        if(this._brackopen_ != null)
        {
            this._brackopen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._brackopen_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TBrackclose getBrackclose()
    {
        return this._brackclose_;
    }

    public void setBrackclose(TBrackclose node)
    {
        if(this._brackclose_ != null)
        {
            this._brackclose_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._brackclose_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opsizeof_)
            + toString(this._brackopen_)
            + toString(this._exp_)
            + toString(this._brackclose_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opsizeof_ == child)
        {
            this._opsizeof_ = null;
            return;
        }

        if(this._brackopen_ == child)
        {
            this._brackopen_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._brackclose_ == child)
        {
            this._brackclose_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opsizeof_ == oldChild)
        {
            setOpsizeof((POpsizeof) newChild);
            return;
        }

        if(this._brackopen_ == oldChild)
        {
            setBrackopen((TBrackopen) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._brackclose_ == oldChild)
        {
            setBrackclose((TBrackclose) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
