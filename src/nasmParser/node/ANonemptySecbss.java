/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.node;

import nasmParser.analysis.*;

@SuppressWarnings("nls")
public final class ANonemptySecbss extends PSecbss
{
    private TSection _section_;
    private TBss _bss_;
    private PLvar _lvar_;

    public ANonemptySecbss()
    {
        // Constructor
    }

    public ANonemptySecbss(
        @SuppressWarnings("hiding") TSection _section_,
        @SuppressWarnings("hiding") TBss _bss_,
        @SuppressWarnings("hiding") PLvar _lvar_)
    {
        // Constructor
        setSection(_section_);

        setBss(_bss_);

        setLvar(_lvar_);

    }

    @Override
    public Object clone()
    {
        return new ANonemptySecbss(
            cloneNode(this._section_),
            cloneNode(this._bss_),
            cloneNode(this._lvar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANonemptySecbss(this);
    }

    public TSection getSection()
    {
        return this._section_;
    }

    public void setSection(TSection node)
    {
        if(this._section_ != null)
        {
            this._section_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._section_ = node;
    }

    public TBss getBss()
    {
        return this._bss_;
    }

    public void setBss(TBss node)
    {
        if(this._bss_ != null)
        {
            this._bss_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bss_ = node;
    }

    public PLvar getLvar()
    {
        return this._lvar_;
    }

    public void setLvar(PLvar node)
    {
        if(this._lvar_ != null)
        {
            this._lvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lvar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._section_)
            + toString(this._bss_)
            + toString(this._lvar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._section_ == child)
        {
            this._section_ = null;
            return;
        }

        if(this._bss_ == child)
        {
            this._bss_ = null;
            return;
        }

        if(this._lvar_ == child)
        {
            this._lvar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._section_ == oldChild)
        {
            setSection((TSection) newChild);
            return;
        }

        if(this._bss_ == oldChild)
        {
            setBss((TBss) newChild);
            return;
        }

        if(this._lvar_ == oldChild)
        {
            setLvar((PLvar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
