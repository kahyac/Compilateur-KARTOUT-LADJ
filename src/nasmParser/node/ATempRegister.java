/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.node;

import nasmParser.analysis.*;

@SuppressWarnings("nls")
public final class ATempRegister extends PRegister
{
    private TPrefixRegister _prefixRegister_;
    private TNumber _number_;

    public ATempRegister()
    {
        // Constructor
    }

    public ATempRegister(
        @SuppressWarnings("hiding") TPrefixRegister _prefixRegister_,
        @SuppressWarnings("hiding") TNumber _number_)
    {
        // Constructor
        setPrefixRegister(_prefixRegister_);

        setNumber(_number_);

    }

    @Override
    public Object clone()
    {
        return new ATempRegister(
            cloneNode(this._prefixRegister_),
            cloneNode(this._number_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATempRegister(this);
    }

    public TPrefixRegister getPrefixRegister()
    {
        return this._prefixRegister_;
    }

    public void setPrefixRegister(TPrefixRegister node)
    {
        if(this._prefixRegister_ != null)
        {
            this._prefixRegister_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prefixRegister_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._prefixRegister_)
            + toString(this._number_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._prefixRegister_ == child)
        {
            this._prefixRegister_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._prefixRegister_ == oldChild)
        {
            setPrefixRegister((TPrefixRegister) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
