/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.analysis;

import java.util.*;
import nasmParser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        if(node.getLinclude() != null)
        {
            node.getLinclude().apply(this);
        }
        if(node.getSecdata() != null)
        {
            node.getSecdata().apply(this);
        }
        if(node.getSecbss() != null)
        {
            node.getSecbss().apply(this);
        }
        if(node.getSectext() != null)
        {
            node.getSectext().apply(this);
        }
        outAProg(node);
    }

    public void inARecLinclude(ARecLinclude node)
    {
        defaultIn(node);
    }

    public void outARecLinclude(ARecLinclude node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLinclude(ARecLinclude node)
    {
        inARecLinclude(node);
        if(node.getInclude() != null)
        {
            node.getInclude().apply(this);
        }
        if(node.getLinclude() != null)
        {
            node.getLinclude().apply(this);
        }
        outARecLinclude(node);
    }

    public void inAEmptyLinclude(AEmptyLinclude node)
    {
        defaultIn(node);
    }

    public void outAEmptyLinclude(AEmptyLinclude node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLinclude(AEmptyLinclude node)
    {
        inAEmptyLinclude(node);
        outAEmptyLinclude(node);
    }

    public void inAInclude(AInclude node)
    {
        defaultIn(node);
    }

    public void outAInclude(AInclude node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInclude(AInclude node)
    {
        inAInclude(node);
        if(node.getPercentage() != null)
        {
            node.getPercentage().apply(this);
        }
        if(node.getInc() != null)
        {
            node.getInc().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getFilename() != null)
        {
            node.getFilename().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        outAInclude(node);
    }

    public void inASimpleFilename(ASimpleFilename node)
    {
        defaultIn(node);
    }

    public void outASimpleFilename(ASimpleFilename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFilename(ASimpleFilename node)
    {
        inASimpleFilename(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outASimpleFilename(node);
    }

    public void inAComplexFilename(AComplexFilename node)
    {
        defaultIn(node);
    }

    public void outAComplexFilename(AComplexFilename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplexFilename(AComplexFilename node)
    {
        inAComplexFilename(node);
        if(node.getPrefix() != null)
        {
            node.getPrefix().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getSuffix() != null)
        {
            node.getSuffix().apply(this);
        }
        outAComplexFilename(node);
    }

    public void inANonemptySecdata(ANonemptySecdata node)
    {
        defaultIn(node);
    }

    public void outANonemptySecdata(ANonemptySecdata node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonemptySecdata(ANonemptySecdata node)
    {
        inANonemptySecdata(node);
        if(node.getSection() != null)
        {
            node.getSection().apply(this);
        }
        if(node.getData() != null)
        {
            node.getData().apply(this);
        }
        if(node.getLconst() != null)
        {
            node.getLconst().apply(this);
        }
        outANonemptySecdata(node);
    }

    public void inAEmptySecdata(AEmptySecdata node)
    {
        defaultIn(node);
    }

    public void outAEmptySecdata(AEmptySecdata node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySecdata(AEmptySecdata node)
    {
        inAEmptySecdata(node);
        outAEmptySecdata(node);
    }

    public void inARecLconst(ARecLconst node)
    {
        defaultIn(node);
    }

    public void outARecLconst(ARecLconst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLconst(ARecLconst node)
    {
        inARecLconst(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getLconst() != null)
        {
            node.getLconst().apply(this);
        }
        outARecLconst(node);
    }

    public void inAEmptyLconst(AEmptyLconst node)
    {
        defaultIn(node);
    }

    public void outAEmptyLconst(AEmptyLconst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLconst(AEmptyLconst node)
    {
        inAEmptyLconst(node);
        outAEmptyLconst(node);
    }

    public void inADbConst(ADbConst node)
    {
        defaultIn(node);
    }

    public void outADbConst(ADbConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADbConst(ADbConst node)
    {
        inADbConst(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getDefinebyte() != null)
        {
            node.getDefinebyte().apply(this);
        }
        if(node.getNumconst() != null)
        {
            node.getNumconst().apply(this);
        }
        outADbConst(node);
    }

    public void inADwConst(ADwConst node)
    {
        defaultIn(node);
    }

    public void outADwConst(ADwConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADwConst(ADwConst node)
    {
        inADwConst(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getDefineword() != null)
        {
            node.getDefineword().apply(this);
        }
        if(node.getNumconst() != null)
        {
            node.getNumconst().apply(this);
        }
        outADwConst(node);
    }

    public void inADdConst(ADdConst node)
    {
        defaultIn(node);
    }

    public void outADdConst(ADdConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADdConst(ADdConst node)
    {
        inADdConst(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getDefinedoubleword() != null)
        {
            node.getDefinedoubleword().apply(this);
        }
        if(node.getNumconst() != null)
        {
            node.getNumconst().apply(this);
        }
        outADdConst(node);
    }

    public void inADqConst(ADqConst node)
    {
        defaultIn(node);
    }

    public void outADqConst(ADqConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADqConst(ADqConst node)
    {
        inADqConst(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getDefinequadword() != null)
        {
            node.getDefinequadword().apply(this);
        }
        if(node.getNumconst() != null)
        {
            node.getNumconst().apply(this);
        }
        outADqConst(node);
    }

    public void inADtConst(ADtConst node)
    {
        defaultIn(node);
    }

    public void outADtConst(ADtConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADtConst(ADtConst node)
    {
        inADtConst(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getDefinetenbytes() != null)
        {
            node.getDefinetenbytes().apply(this);
        }
        if(node.getNumconst() != null)
        {
            node.getNumconst().apply(this);
        }
        outADtConst(node);
    }

    public void inANonemptySecbss(ANonemptySecbss node)
    {
        defaultIn(node);
    }

    public void outANonemptySecbss(ANonemptySecbss node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonemptySecbss(ANonemptySecbss node)
    {
        inANonemptySecbss(node);
        if(node.getSection() != null)
        {
            node.getSection().apply(this);
        }
        if(node.getBss() != null)
        {
            node.getBss().apply(this);
        }
        if(node.getLvar() != null)
        {
            node.getLvar().apply(this);
        }
        outANonemptySecbss(node);
    }

    public void inAEmptySecbss(AEmptySecbss node)
    {
        defaultIn(node);
    }

    public void outAEmptySecbss(AEmptySecbss node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySecbss(AEmptySecbss node)
    {
        inAEmptySecbss(node);
        outAEmptySecbss(node);
    }

    public void inARecLvar(ARecLvar node)
    {
        defaultIn(node);
    }

    public void outARecLvar(ARecLvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLvar(ARecLvar node)
    {
        inARecLvar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getLvar() != null)
        {
            node.getLvar().apply(this);
        }
        outARecLvar(node);
    }

    public void inAEmptyLvar(AEmptyLvar node)
    {
        defaultIn(node);
    }

    public void outAEmptyLvar(AEmptyLvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLvar(AEmptyLvar node)
    {
        inAEmptyLvar(node);
        outAEmptyLvar(node);
    }

    public void inAResbVar(AResbVar node)
    {
        defaultIn(node);
    }

    public void outAResbVar(AResbVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResbVar(AResbVar node)
    {
        inAResbVar(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getSemicol() != null)
        {
            node.getSemicol().apply(this);
        }
        if(node.getReservebyte() != null)
        {
            node.getReservebyte().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAResbVar(node);
    }

    public void inAReswVar(AReswVar node)
    {
        defaultIn(node);
    }

    public void outAReswVar(AReswVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReswVar(AReswVar node)
    {
        inAReswVar(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getSemicol() != null)
        {
            node.getSemicol().apply(this);
        }
        if(node.getReserveword() != null)
        {
            node.getReserveword().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAReswVar(node);
    }

    public void inAResdVar(AResdVar node)
    {
        defaultIn(node);
    }

    public void outAResdVar(AResdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResdVar(AResdVar node)
    {
        inAResdVar(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getSemicol() != null)
        {
            node.getSemicol().apply(this);
        }
        if(node.getReservedoubleword() != null)
        {
            node.getReservedoubleword().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAResdVar(node);
    }

    public void inAResqVar(AResqVar node)
    {
        defaultIn(node);
    }

    public void outAResqVar(AResqVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResqVar(AResqVar node)
    {
        inAResqVar(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getSemicol() != null)
        {
            node.getSemicol().apply(this);
        }
        if(node.getReservequadword() != null)
        {
            node.getReservequadword().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAResqVar(node);
    }

    public void inARestVar(ARestVar node)
    {
        defaultIn(node);
    }

    public void outARestVar(ARestVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestVar(ARestVar node)
    {
        inARestVar(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getSemicol() != null)
        {
            node.getSemicol().apply(this);
        }
        if(node.getReservetenbytes() != null)
        {
            node.getReservetenbytes().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outARestVar(node);
    }

    public void inASectext(ASectext node)
    {
        defaultIn(node);
    }

    public void outASectext(ASectext node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASectext(ASectext node)
    {
        inASectext(node);
        if(node.getSection() != null)
        {
            node.getSection().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getLglobal() != null)
        {
            node.getLglobal().apply(this);
        }
        if(node.getLinst() != null)
        {
            node.getLinst().apply(this);
        }
        outASectext(node);
    }

    public void inARecLglobal(ARecLglobal node)
    {
        defaultIn(node);
    }

    public void outARecLglobal(ARecLglobal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLglobal(ARecLglobal node)
    {
        inARecLglobal(node);
        if(node.getGlobal() != null)
        {
            node.getGlobal().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getLglobal() != null)
        {
            node.getLglobal().apply(this);
        }
        outARecLglobal(node);
    }

    public void inAEmptyLglobal(AEmptyLglobal node)
    {
        defaultIn(node);
    }

    public void outAEmptyLglobal(AEmptyLglobal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLglobal(AEmptyLglobal node)
    {
        inAEmptyLglobal(node);
        outAEmptyLglobal(node);
    }

    public void inARecLinst(ARecLinst node)
    {
        defaultIn(node);
    }

    public void outARecLinst(ARecLinst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLinst(ARecLinst node)
    {
        inARecLinst(node);
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        if(node.getLinst() != null)
        {
            node.getLinst().apply(this);
        }
        outARecLinst(node);
    }

    public void inALastLinst(ALastLinst node)
    {
        defaultIn(node);
    }

    public void outALastLinst(ALastLinst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALastLinst(ALastLinst node)
    {
        inALastLinst(node);
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        outALastLinst(node);
    }

    public void inAMovInst(AMovInst node)
    {
        defaultIn(node);
    }

    public void outAMovInst(AMovInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMovInst(AMovInst node)
    {
        inAMovInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getMov() != null)
        {
            node.getMov().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outAMovInst(node);
    }

    public void inAPushInst(APushInst node)
    {
        defaultIn(node);
    }

    public void outAPushInst(APushInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPushInst(APushInst node)
    {
        inAPushInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getPush() != null)
        {
            node.getPush().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outAPushInst(node);
    }

    public void inAPopInst(APopInst node)
    {
        defaultIn(node);
    }

    public void outAPopInst(APopInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPopInst(APopInst node)
    {
        inAPopInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getPop() != null)
        {
            node.getPop().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        outAPopInst(node);
    }

    public void inAAddInst(AAddInst node)
    {
        defaultIn(node);
    }

    public void outAAddInst(AAddInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddInst(AAddInst node)
    {
        inAAddInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outAAddInst(node);
    }

    public void inASubInst(ASubInst node)
    {
        defaultIn(node);
    }

    public void outASubInst(ASubInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubInst(ASubInst node)
    {
        inASubInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outASubInst(node);
    }

    public void inAImulInst(AImulInst node)
    {
        defaultIn(node);
    }

    public void outAImulInst(AImulInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImulInst(AImulInst node)
    {
        inAImulInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getImul() != null)
        {
            node.getImul().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outAImulInst(node);
    }

    public void inAIdivInst(AIdivInst node)
    {
        defaultIn(node);
    }

    public void outAIdivInst(AIdivInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdivInst(AIdivInst node)
    {
        inAIdivInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getIdiv() != null)
        {
            node.getIdiv().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        outAIdivInst(node);
    }

    public void inAAndInst(AAndInst node)
    {
        defaultIn(node);
    }

    public void outAAndInst(AAndInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndInst(AAndInst node)
    {
        inAAndInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outAAndInst(node);
    }

    public void inAOrInst(AOrInst node)
    {
        defaultIn(node);
    }

    public void outAOrInst(AOrInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrInst(AOrInst node)
    {
        inAOrInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outAOrInst(node);
    }

    public void inAXorInst(AXorInst node)
    {
        defaultIn(node);
    }

    public void outAXorInst(AXorInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorInst(AXorInst node)
    {
        inAXorInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outAXorInst(node);
    }

    public void inANotInst(ANotInst node)
    {
        defaultIn(node);
    }

    public void outANotInst(ANotInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotInst(ANotInst node)
    {
        inANotInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        outANotInst(node);
    }

    public void inACmpInst(ACmpInst node)
    {
        defaultIn(node);
    }

    public void outACmpInst(ACmpInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmpInst(ACmpInst node)
    {
        inACmpInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getCmp() != null)
        {
            node.getCmp().apply(this);
        }
        if(node.getAr() != null)
        {
            node.getAr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAcr() != null)
        {
            node.getAcr().apply(this);
        }
        outACmpInst(node);
    }

    public void inAJmpInst(AJmpInst node)
    {
        defaultIn(node);
    }

    public void outAJmpInst(AJmpInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpInst(AJmpInst node)
    {
        inAJmpInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getJmp() != null)
        {
            node.getJmp().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAJmpInst(node);
    }

    public void inAJeInst(AJeInst node)
    {
        defaultIn(node);
    }

    public void outAJeInst(AJeInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJeInst(AJeInst node)
    {
        inAJeInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getJe() != null)
        {
            node.getJe().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAJeInst(node);
    }

    public void inAJneInst(AJneInst node)
    {
        defaultIn(node);
    }

    public void outAJneInst(AJneInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJneInst(AJneInst node)
    {
        inAJneInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getJne() != null)
        {
            node.getJne().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAJneInst(node);
    }

    public void inAJgInst(AJgInst node)
    {
        defaultIn(node);
    }

    public void outAJgInst(AJgInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJgInst(AJgInst node)
    {
        inAJgInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getJg() != null)
        {
            node.getJg().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAJgInst(node);
    }

    public void inAJgeInst(AJgeInst node)
    {
        defaultIn(node);
    }

    public void outAJgeInst(AJgeInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJgeInst(AJgeInst node)
    {
        inAJgeInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getJge() != null)
        {
            node.getJge().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAJgeInst(node);
    }

    public void inAJlInst(AJlInst node)
    {
        defaultIn(node);
    }

    public void outAJlInst(AJlInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJlInst(AJlInst node)
    {
        inAJlInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getJl() != null)
        {
            node.getJl().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outAJlInst(node);
    }

    public void inACallInst(ACallInst node)
    {
        defaultIn(node);
    }

    public void outACallInst(ACallInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallInst(ACallInst node)
    {
        inACallInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outACallInst(node);
    }

    public void inARetInst(ARetInst node)
    {
        defaultIn(node);
    }

    public void outARetInst(ARetInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetInst(ARetInst node)
    {
        inARetInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getRet() != null)
        {
            node.getRet().apply(this);
        }
        outARetInst(node);
    }

    public void inAInterInst(AInterInst node)
    {
        defaultIn(node);
    }

    public void outAInterInst(AInterInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterInst(AInterInst node)
    {
        inAInterInst(node);
        if(node.getOplabel() != null)
        {
            node.getOplabel().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAInterInst(node);
    }

    public void inAAddressAcr(AAddressAcr node)
    {
        defaultIn(node);
    }

    public void outAAddressAcr(AAddressAcr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressAcr(AAddressAcr node)
    {
        inAAddressAcr(node);
        if(node.getAddress() != null)
        {
            node.getAddress().apply(this);
        }
        outAAddressAcr(node);
    }

    public void inANumconstAcr(ANumconstAcr node)
    {
        defaultIn(node);
    }

    public void outANumconstAcr(ANumconstAcr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumconstAcr(ANumconstAcr node)
    {
        inANumconstAcr(node);
        if(node.getNumconst() != null)
        {
            node.getNumconst().apply(this);
        }
        outANumconstAcr(node);
    }

    public void inARegisterAcr(ARegisterAcr node)
    {
        defaultIn(node);
    }

    public void outARegisterAcr(ARegisterAcr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARegisterAcr(ARegisterAcr node)
    {
        inARegisterAcr(node);
        if(node.getRegister() != null)
        {
            node.getRegister().apply(this);
        }
        outARegisterAcr(node);
    }

    public void inAAddressAr(AAddressAr node)
    {
        defaultIn(node);
    }

    public void outAAddressAr(AAddressAr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressAr(AAddressAr node)
    {
        inAAddressAr(node);
        if(node.getAddress() != null)
        {
            node.getAddress().apply(this);
        }
        outAAddressAr(node);
    }

    public void inARegisterAr(ARegisterAr node)
    {
        defaultIn(node);
    }

    public void outARegisterAr(ARegisterAr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARegisterAr(ARegisterAr node)
    {
        inARegisterAr(node);
        if(node.getRegister() != null)
        {
            node.getRegister().apply(this);
        }
        outARegisterAr(node);
    }

    public void inAAddress(AAddress node)
    {
        defaultIn(node);
    }

    public void outAAddress(AAddress node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddress(AAddress node)
    {
        inAAddress(node);
        if(node.getOpsizeof() != null)
        {
            node.getOpsizeof().apply(this);
        }
        if(node.getBrackopen() != null)
        {
            node.getBrackopen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getBrackclose() != null)
        {
            node.getBrackclose().apply(this);
        }
        outAAddress(node);
    }

    public void inAByteOpsizeof(AByteOpsizeof node)
    {
        defaultIn(node);
    }

    public void outAByteOpsizeof(AByteOpsizeof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteOpsizeof(AByteOpsizeof node)
    {
        inAByteOpsizeof(node);
        if(node.getByte() != null)
        {
            node.getByte().apply(this);
        }
        outAByteOpsizeof(node);
    }

    public void inAWordOpsizeof(AWordOpsizeof node)
    {
        defaultIn(node);
    }

    public void outAWordOpsizeof(AWordOpsizeof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWordOpsizeof(AWordOpsizeof node)
    {
        inAWordOpsizeof(node);
        if(node.getWord() != null)
        {
            node.getWord().apply(this);
        }
        outAWordOpsizeof(node);
    }

    public void inADwordOpsizeof(ADwordOpsizeof node)
    {
        defaultIn(node);
    }

    public void outADwordOpsizeof(ADwordOpsizeof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADwordOpsizeof(ADwordOpsizeof node)
    {
        inADwordOpsizeof(node);
        if(node.getDword() != null)
        {
            node.getDword().apply(this);
        }
        outADwordOpsizeof(node);
    }

    public void inAEmptyOpsizeof(AEmptyOpsizeof node)
    {
        defaultIn(node);
    }

    public void outAEmptyOpsizeof(AEmptyOpsizeof node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyOpsizeof(AEmptyOpsizeof node)
    {
        inAEmptyOpsizeof(node);
        outAEmptyOpsizeof(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAMinusExp(node);
    }

    public void inANextExp(ANextExp node)
    {
        defaultIn(node);
    }

    public void outANextExp(ANextExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextExp(ANextExp node)
    {
        inANextExp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outANextExp(node);
    }

    public void inATimesExp1(ATimesExp1 node)
    {
        defaultIn(node);
    }

    public void outATimesExp1(ATimesExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesExp1(ATimesExp1 node)
    {
        inATimesExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outATimesExp1(node);
    }

    public void inANextExp1(ANextExp1 node)
    {
        defaultIn(node);
    }

    public void outANextExp1(ANextExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextExp1(ANextExp1 node)
    {
        inANextExp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outANextExp1(node);
    }

    public void inALabelExp2(ALabelExp2 node)
    {
        defaultIn(node);
    }

    public void outALabelExp2(ALabelExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelExp2(ALabelExp2 node)
    {
        inALabelExp2(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        outALabelExp2(node);
    }

    public void inANumconstExp2(ANumconstExp2 node)
    {
        defaultIn(node);
    }

    public void outANumconstExp2(ANumconstExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumconstExp2(ANumconstExp2 node)
    {
        inANumconstExp2(node);
        if(node.getNumconst() != null)
        {
            node.getNumconst().apply(this);
        }
        outANumconstExp2(node);
    }

    public void inARegisterExp2(ARegisterExp2 node)
    {
        defaultIn(node);
    }

    public void outARegisterExp2(ARegisterExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARegisterExp2(ARegisterExp2 node)
    {
        inARegisterExp2(node);
        if(node.getRegister() != null)
        {
            node.getRegister().apply(this);
        }
        outARegisterExp2(node);
    }

    public void inANumconst(ANumconst node)
    {
        defaultIn(node);
    }

    public void outANumconst(ANumconst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumconst(ANumconst node)
    {
        inANumconst(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumconst(node);
    }

    public void inATempRegister(ATempRegister node)
    {
        defaultIn(node);
    }

    public void outATempRegister(ATempRegister node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATempRegister(ATempRegister node)
    {
        inATempRegister(node);
        if(node.getPrefixRegister() != null)
        {
            node.getPrefixRegister().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outATempRegister(node);
    }

    public void inAEaxRegister(AEaxRegister node)
    {
        defaultIn(node);
    }

    public void outAEaxRegister(AEaxRegister node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEaxRegister(AEaxRegister node)
    {
        inAEaxRegister(node);
        if(node.getEax() != null)
        {
            node.getEax().apply(this);
        }
        outAEaxRegister(node);
    }

    public void inAEbxRegister(AEbxRegister node)
    {
        defaultIn(node);
    }

    public void outAEbxRegister(AEbxRegister node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEbxRegister(AEbxRegister node)
    {
        inAEbxRegister(node);
        if(node.getEbx() != null)
        {
            node.getEbx().apply(this);
        }
        outAEbxRegister(node);
    }

    public void inAEcxRegister(AEcxRegister node)
    {
        defaultIn(node);
    }

    public void outAEcxRegister(AEcxRegister node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcxRegister(AEcxRegister node)
    {
        inAEcxRegister(node);
        if(node.getEcx() != null)
        {
            node.getEcx().apply(this);
        }
        outAEcxRegister(node);
    }

    public void inAEdxRegister(AEdxRegister node)
    {
        defaultIn(node);
    }

    public void outAEdxRegister(AEdxRegister node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEdxRegister(AEdxRegister node)
    {
        inAEdxRegister(node);
        if(node.getEdx() != null)
        {
            node.getEdx().apply(this);
        }
        outAEdxRegister(node);
    }

    public void inAEbpRegister(AEbpRegister node)
    {
        defaultIn(node);
    }

    public void outAEbpRegister(AEbpRegister node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEbpRegister(AEbpRegister node)
    {
        inAEbpRegister(node);
        if(node.getEbp() != null)
        {
            node.getEbp().apply(this);
        }
        outAEbpRegister(node);
    }

    public void inAEspRegister(AEspRegister node)
    {
        defaultIn(node);
    }

    public void outAEspRegister(AEspRegister node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEspRegister(AEspRegister node)
    {
        inAEspRegister(node);
        if(node.getEsp() != null)
        {
            node.getEsp().apply(this);
        }
        outAEspRegister(node);
    }

    public void inALabelOplabel(ALabelOplabel node)
    {
        defaultIn(node);
    }

    public void outALabelOplabel(ALabelOplabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabelOplabel(ALabelOplabel node)
    {
        inALabelOplabel(node);
        if(node.getLabel() != null)
        {
            node.getLabel().apply(this);
        }
        if(node.getSemicol() != null)
        {
            node.getSemicol().apply(this);
        }
        outALabelOplabel(node);
    }

    public void inAEmptyOplabel(AEmptyOplabel node)
    {
        defaultIn(node);
    }

    public void outAEmptyOplabel(AEmptyOplabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyOplabel(AEmptyOplabel node)
    {
        inAEmptyOplabel(node);
        outAEmptyOplabel(node);
    }

    public void inALabel(ALabel node)
    {
        defaultIn(node);
    }

    public void outALabel(ALabel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALabel(ALabel node)
    {
        inALabel(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALabel(node);
    }
}
