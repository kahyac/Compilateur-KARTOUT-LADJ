/* This file was generated by SableCC (http://www.sablecc.org/). */

package nasmParser.parser;

import nasmParser.lexer.*;
import nasmParser.node.*;
import nasmParser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ANonempty1$Nonempty1Prog */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ANonempty1$Empty1Prog */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AEmpty1$Nonempty1Prog */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AEmpty1$Empty1Prog */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce ARecLinclude */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AEmptyLinclude */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AInclude */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ASimpleFilename */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AComplexFilename */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce ARecLconst */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AEmptyLconst */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce ADbConst */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce ADwConst */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ADdConst */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ADqConst */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ADtConst */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce ARecLvar */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AEmptyLvar */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AResbVar */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AReswVar */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AResdVar */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AResqVar */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list);
            }
            break;
            case 22: /* reduce ARestVar */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list);
            }
            break;
            case 23: /* reduce ASectext */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce ARecLglobal */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list);
            }
            break;
            case 25: /* reduce AEmptyLglobal */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list);
            }
            break;
            case 26: /* reduce ARecLinst */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce ALastLinst */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce AMovInst */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce APushInst */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce APopInst */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AAddInst */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list);
            }
            break;
            case 32: /* reduce ASubInst */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AImulInst */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AIdivInst */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list);
            }
            break;
            case 35: /* reduce AAndInst */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list);
            }
            break;
            case 36: /* reduce AOrInst */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list);
            }
            break;
            case 37: /* reduce AXorInst */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list);
            }
            break;
            case 38: /* reduce ANotInst */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list);
            }
            break;
            case 39: /* reduce ACmpInst */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list);
            }
            break;
            case 40: /* reduce AJmpInst */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list);
            }
            break;
            case 41: /* reduce AJeInst */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list);
            }
            break;
            case 42: /* reduce AJneInst */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list);
            }
            break;
            case 43: /* reduce AJgInst */
            {
                ArrayList<Object> list = new43();
                push(goTo(11), list);
            }
            break;
            case 44: /* reduce AJgeInst */
            {
                ArrayList<Object> list = new44();
                push(goTo(11), list);
            }
            break;
            case 45: /* reduce AJlInst */
            {
                ArrayList<Object> list = new45();
                push(goTo(11), list);
            }
            break;
            case 46: /* reduce ACallInst */
            {
                ArrayList<Object> list = new46();
                push(goTo(11), list);
            }
            break;
            case 47: /* reduce ARetInst */
            {
                ArrayList<Object> list = new47();
                push(goTo(11), list);
            }
            break;
            case 48: /* reduce AInterInst */
            {
                ArrayList<Object> list = new48();
                push(goTo(11), list);
            }
            break;
            case 49: /* reduce AAddressAcr */
            {
                ArrayList<Object> list = new49();
                push(goTo(12), list);
            }
            break;
            case 50: /* reduce ANumconstAcr */
            {
                ArrayList<Object> list = new50();
                push(goTo(12), list);
            }
            break;
            case 51: /* reduce ARegisterAcr */
            {
                ArrayList<Object> list = new51();
                push(goTo(12), list);
            }
            break;
            case 52: /* reduce AAddressAr */
            {
                ArrayList<Object> list = new52();
                push(goTo(13), list);
            }
            break;
            case 53: /* reduce ARegisterAr */
            {
                ArrayList<Object> list = new53();
                push(goTo(13), list);
            }
            break;
            case 54: /* reduce AAddress */
            {
                ArrayList<Object> list = new54();
                push(goTo(14), list);
            }
            break;
            case 55: /* reduce AByteOpsizeof */
            {
                ArrayList<Object> list = new55();
                push(goTo(15), list);
            }
            break;
            case 56: /* reduce AWordOpsizeof */
            {
                ArrayList<Object> list = new56();
                push(goTo(15), list);
            }
            break;
            case 57: /* reduce ADwordOpsizeof */
            {
                ArrayList<Object> list = new57();
                push(goTo(15), list);
            }
            break;
            case 58: /* reduce AEmptyOpsizeof */
            {
                ArrayList<Object> list = new58();
                push(goTo(15), list);
            }
            break;
            case 59: /* reduce APlusExp */
            {
                ArrayList<Object> list = new59();
                push(goTo(16), list);
            }
            break;
            case 60: /* reduce AMinusExp */
            {
                ArrayList<Object> list = new60();
                push(goTo(16), list);
            }
            break;
            case 61: /* reduce ANextExp */
            {
                ArrayList<Object> list = new61();
                push(goTo(16), list);
            }
            break;
            case 62: /* reduce ATimesExp1 */
            {
                ArrayList<Object> list = new62();
                push(goTo(17), list);
            }
            break;
            case 63: /* reduce ANextExp1 */
            {
                ArrayList<Object> list = new63();
                push(goTo(17), list);
            }
            break;
            case 64: /* reduce ALabelExp2 */
            {
                ArrayList<Object> list = new64();
                push(goTo(18), list);
            }
            break;
            case 65: /* reduce ANumconstExp2 */
            {
                ArrayList<Object> list = new65();
                push(goTo(18), list);
            }
            break;
            case 66: /* reduce ARegisterExp2 */
            {
                ArrayList<Object> list = new66();
                push(goTo(18), list);
            }
            break;
            case 67: /* reduce ANumconst */
            {
                ArrayList<Object> list = new67();
                push(goTo(19), list);
            }
            break;
            case 68: /* reduce ATempRegister */
            {
                ArrayList<Object> list = new68();
                push(goTo(20), list);
            }
            break;
            case 69: /* reduce AEaxRegister */
            {
                ArrayList<Object> list = new69();
                push(goTo(20), list);
            }
            break;
            case 70: /* reduce AEbxRegister */
            {
                ArrayList<Object> list = new70();
                push(goTo(20), list);
            }
            break;
            case 71: /* reduce AEcxRegister */
            {
                ArrayList<Object> list = new71();
                push(goTo(20), list);
            }
            break;
            case 72: /* reduce AEdxRegister */
            {
                ArrayList<Object> list = new72();
                push(goTo(20), list);
            }
            break;
            case 73: /* reduce AEbpRegister */
            {
                ArrayList<Object> list = new73();
                push(goTo(20), list);
            }
            break;
            case 74: /* reduce AEspRegister */
            {
                ArrayList<Object> list = new74();
                push(goTo(20), list);
            }
            break;
            case 75: /* reduce ALabelOplabel */
            {
                ArrayList<Object> list = new75();
                push(goTo(21), list);
            }
            break;
            case 76: /* reduce AEmptyOplabel */
            {
                ArrayList<Object> list = new76();
                push(goTo(21), list);
            }
            break;
            case 77: /* reduce ALabel */
            {
                ArrayList<Object> list = new77();
                push(goTo(22), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ANonempty1$Nonempty1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PLinclude plincludeNode2;
        PSecdata psecdataNode3;
        PSecbss psecbssNode7;
        PSectext psectextNode11;
        plincludeNode2 = (PLinclude)nodeArrayList1.get(0);
        {
            // Block
        TSection tsectionNode4;
        TData tdataNode5;
        PLconst plconstNode6;
        tsectionNode4 = (TSection)nodeArrayList2.get(0);
        tdataNode5 = (TData)nodeArrayList3.get(0);
        plconstNode6 = (PLconst)nodeArrayList4.get(0);

        psecdataNode3 = new ANonemptySecdata(tsectionNode4, tdataNode5, plconstNode6);
        }
        {
            // Block
        TSection tsectionNode8;
        TBss tbssNode9;
        PLvar plvarNode10;
        tsectionNode8 = (TSection)nodeArrayList5.get(0);
        tbssNode9 = (TBss)nodeArrayList6.get(0);
        plvarNode10 = (PLvar)nodeArrayList7.get(0);

        psecbssNode7 = new ANonemptySecbss(tsectionNode8, tbssNode9, plvarNode10);
        }
        psectextNode11 = (PSectext)nodeArrayList8.get(0);

        pprogNode1 = new AProg(plincludeNode2, psecdataNode3, psecbssNode7, psectextNode11);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ANonempty1$Empty1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PLinclude plincludeNode2;
        PSecdata psecdataNode3;
        PSecbss psecbssNode7;
        PSectext psectextNode8;
        plincludeNode2 = (PLinclude)nodeArrayList1.get(0);
        {
            // Block
        TSection tsectionNode4;
        TData tdataNode5;
        PLconst plconstNode6;
        tsectionNode4 = (TSection)nodeArrayList2.get(0);
        tdataNode5 = (TData)nodeArrayList3.get(0);
        plconstNode6 = (PLconst)nodeArrayList4.get(0);

        psecdataNode3 = new ANonemptySecdata(tsectionNode4, tdataNode5, plconstNode6);
        }
        {
            // Block

        psecbssNode7 = new AEmptySecbss();
        }
        psectextNode8 = (PSectext)nodeArrayList5.get(0);

        pprogNode1 = new AProg(plincludeNode2, psecdataNode3, psecbssNode7, psectextNode8);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEmpty1$Nonempty1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PLinclude plincludeNode2;
        PSecdata psecdataNode3;
        PSecbss psecbssNode4;
        PSectext psectextNode8;
        plincludeNode2 = (PLinclude)nodeArrayList1.get(0);
        {
            // Block

        psecdataNode3 = new AEmptySecdata();
        }
        {
            // Block
        TSection tsectionNode5;
        TBss tbssNode6;
        PLvar plvarNode7;
        tsectionNode5 = (TSection)nodeArrayList2.get(0);
        tbssNode6 = (TBss)nodeArrayList3.get(0);
        plvarNode7 = (PLvar)nodeArrayList4.get(0);

        psecbssNode4 = new ANonemptySecbss(tsectionNode5, tbssNode6, plvarNode7);
        }
        psectextNode8 = (PSectext)nodeArrayList5.get(0);

        pprogNode1 = new AProg(plincludeNode2, psecdataNode3, psecbssNode4, psectextNode8);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AEmpty1$Empty1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PLinclude plincludeNode2;
        PSecdata psecdataNode3;
        PSecbss psecbssNode4;
        PSectext psectextNode5;
        plincludeNode2 = (PLinclude)nodeArrayList1.get(0);
        {
            // Block

        psecdataNode3 = new AEmptySecdata();
        }
        {
            // Block

        psecbssNode4 = new AEmptySecbss();
        }
        psectextNode5 = (PSectext)nodeArrayList2.get(0);

        pprogNode1 = new AProg(plincludeNode2, psecdataNode3, psecbssNode4, psectextNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ARecLinclude */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLinclude plincludeNode1;
        {
            // Block
        PInclude pincludeNode2;
        PLinclude plincludeNode3;
        pincludeNode2 = (PInclude)nodeArrayList1.get(0);
        plincludeNode3 = (PLinclude)nodeArrayList2.get(0);

        plincludeNode1 = new ARecLinclude(pincludeNode2, plincludeNode3);
        }
	nodeList.add(plincludeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEmptyLinclude */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLinclude plincludeNode1;
        {
            // Block

        plincludeNode1 = new AEmptyLinclude();
        }
	nodeList.add(plincludeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AInclude */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInclude pincludeNode1;
        {
            // Block
        TPercentage tpercentageNode2;
        TInc tincNode3;
        TQuote tquoteNode4;
        PFilename pfilenameNode5;
        TQuote tquoteNode6;
        tpercentageNode2 = (TPercentage)nodeArrayList1.get(0);
        tincNode3 = (TInc)nodeArrayList2.get(0);
        tquoteNode4 = (TQuote)nodeArrayList3.get(0);
        pfilenameNode5 = (PFilename)nodeArrayList4.get(0);
        tquoteNode6 = (TQuote)nodeArrayList5.get(0);

        pincludeNode1 = new AInclude(tpercentageNode2, tincNode3, tquoteNode4, pfilenameNode5, tquoteNode6);
        }
	nodeList.add(pincludeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASimpleFilename */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFilename pfilenameNode1;
        {
            // Block
        PLabel plabelNode2;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);

        pfilenameNode1 = new ASimpleFilename(plabelNode2);
        }
	nodeList.add(pfilenameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AComplexFilename */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFilename pfilenameNode1;
        {
            // Block
        PLabel plabelNode2;
        TDot tdotNode3;
        PLabel plabelNode4;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pfilenameNode1 = new AComplexFilename(plabelNode2, tdotNode3, plabelNode4);
        }
	nodeList.add(pfilenameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ARecLconst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLconst plconstNode1;
        {
            // Block
        PConst pconstNode2;
        PLconst plconstNode3;
        pconstNode2 = (PConst)nodeArrayList1.get(0);
        plconstNode3 = (PLconst)nodeArrayList2.get(0);

        plconstNode1 = new ARecLconst(pconstNode2, plconstNode3);
        }
	nodeList.add(plconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AEmptyLconst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLconst plconstNode1;
        {
            // Block

        plconstNode1 = new AEmptyLconst();
        }
	nodeList.add(plconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADbConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        PLabel plabelNode2;
        TDefinebyte tdefinebyteNode3;
        PNumconst pnumconstNode4;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tdefinebyteNode3 = (TDefinebyte)nodeArrayList2.get(0);
        pnumconstNode4 = (PNumconst)nodeArrayList3.get(0);

        pconstNode1 = new ADbConst(plabelNode2, tdefinebyteNode3, pnumconstNode4);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADwConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        PLabel plabelNode2;
        TDefineword tdefinewordNode3;
        PNumconst pnumconstNode4;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tdefinewordNode3 = (TDefineword)nodeArrayList2.get(0);
        pnumconstNode4 = (PNumconst)nodeArrayList3.get(0);

        pconstNode1 = new ADwConst(plabelNode2, tdefinewordNode3, pnumconstNode4);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADdConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        PLabel plabelNode2;
        TDefinedoubleword tdefinedoublewordNode3;
        PNumconst pnumconstNode4;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tdefinedoublewordNode3 = (TDefinedoubleword)nodeArrayList2.get(0);
        pnumconstNode4 = (PNumconst)nodeArrayList3.get(0);

        pconstNode1 = new ADdConst(plabelNode2, tdefinedoublewordNode3, pnumconstNode4);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ADqConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        PLabel plabelNode2;
        TDefinequadword tdefinequadwordNode3;
        PNumconst pnumconstNode4;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tdefinequadwordNode3 = (TDefinequadword)nodeArrayList2.get(0);
        pnumconstNode4 = (PNumconst)nodeArrayList3.get(0);

        pconstNode1 = new ADqConst(plabelNode2, tdefinequadwordNode3, pnumconstNode4);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADtConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConst pconstNode1;
        {
            // Block
        PLabel plabelNode2;
        TDefinetenbytes tdefinetenbytesNode3;
        PNumconst pnumconstNode4;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tdefinetenbytesNode3 = (TDefinetenbytes)nodeArrayList2.get(0);
        pnumconstNode4 = (PNumconst)nodeArrayList3.get(0);

        pconstNode1 = new ADtConst(plabelNode2, tdefinetenbytesNode3, pnumconstNode4);
        }
	nodeList.add(pconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ARecLvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLvar plvarNode1;
        {
            // Block
        PVar pvarNode2;
        PLvar plvarNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        plvarNode3 = (PLvar)nodeArrayList2.get(0);

        plvarNode1 = new ARecLvar(pvarNode2, plvarNode3);
        }
	nodeList.add(plvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEmptyLvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLvar plvarNode1;
        {
            // Block

        plvarNode1 = new AEmptyLvar();
        }
	nodeList.add(plvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AResbVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PLabel plabelNode2;
        TSemicol tsemicolNode3;
        TReservebyte treservebyteNode4;
        TNumber tnumberNode5;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);
        treservebyteNode4 = (TReservebyte)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);

        pvarNode1 = new AResbVar(plabelNode2, tsemicolNode3, treservebyteNode4, tnumberNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AReswVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PLabel plabelNode2;
        TSemicol tsemicolNode3;
        TReserveword treservewordNode4;
        TNumber tnumberNode5;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);
        treservewordNode4 = (TReserveword)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);

        pvarNode1 = new AReswVar(plabelNode2, tsemicolNode3, treservewordNode4, tnumberNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AResdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PLabel plabelNode2;
        TSemicol tsemicolNode3;
        TReservedoubleword treservedoublewordNode4;
        TNumber tnumberNode5;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);
        treservedoublewordNode4 = (TReservedoubleword)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);

        pvarNode1 = new AResdVar(plabelNode2, tsemicolNode3, treservedoublewordNode4, tnumberNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AResqVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PLabel plabelNode2;
        TSemicol tsemicolNode3;
        TReservequadword treservequadwordNode4;
        TNumber tnumberNode5;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);
        treservequadwordNode4 = (TReservequadword)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);

        pvarNode1 = new AResqVar(plabelNode2, tsemicolNode3, treservequadwordNode4, tnumberNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ARestVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PLabel plabelNode2;
        TSemicol tsemicolNode3;
        TReservetenbytes treservetenbytesNode4;
        TNumber tnumberNode5;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);
        treservetenbytesNode4 = (TReservetenbytes)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);

        pvarNode1 = new ARestVar(plabelNode2, tsemicolNode3, treservetenbytesNode4, tnumberNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASectext */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSectext psectextNode1;
        {
            // Block
        TSection tsectionNode2;
        TText ttextNode3;
        PLglobal plglobalNode4;
        PLinst plinstNode5;
        tsectionNode2 = (TSection)nodeArrayList1.get(0);
        ttextNode3 = (TText)nodeArrayList2.get(0);
        plglobalNode4 = (PLglobal)nodeArrayList3.get(0);
        plinstNode5 = (PLinst)nodeArrayList4.get(0);

        psectextNode1 = new ASectext(tsectionNode2, ttextNode3, plglobalNode4, plinstNode5);
        }
	nodeList.add(psectextNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ARecLglobal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLglobal plglobalNode1;
        {
            // Block
        TGlobal tglobalNode2;
        PLabel plabelNode3;
        PLglobal plglobalNode4;
        tglobalNode2 = (TGlobal)nodeArrayList1.get(0);
        plabelNode3 = (PLabel)nodeArrayList2.get(0);
        plglobalNode4 = (PLglobal)nodeArrayList3.get(0);

        plglobalNode1 = new ARecLglobal(tglobalNode2, plabelNode3, plglobalNode4);
        }
	nodeList.add(plglobalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AEmptyLglobal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLglobal plglobalNode1;
        {
            // Block

        plglobalNode1 = new AEmptyLglobal();
        }
	nodeList.add(plglobalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARecLinst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLinst plinstNode1;
        {
            // Block
        PInst pinstNode2;
        PLinst plinstNode3;
        pinstNode2 = (PInst)nodeArrayList1.get(0);
        plinstNode3 = (PLinst)nodeArrayList2.get(0);

        plinstNode1 = new ARecLinst(pinstNode2, plinstNode3);
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ALastLinst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLinst plinstNode1;
        {
            // Block
        PInst pinstNode2;
        pinstNode2 = (PInst)nodeArrayList1.get(0);

        plinstNode1 = new ALastLinst(pinstNode2);
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AMovInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TMov tmovNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tmovNode3 = (TMov)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new AMovInst(poplabelNode2, tmovNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce APushInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TPush tpushNode3;
        PAcr pacrNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tpushNode3 = (TPush)nodeArrayList2.get(0);
        pacrNode4 = (PAcr)nodeArrayList3.get(0);

        pinstNode1 = new APushInst(poplabelNode2, tpushNode3, pacrNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce APopInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TPop tpopNode3;
        PAr parNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tpopNode3 = (TPop)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);

        pinstNode1 = new APopInst(poplabelNode2, tpopNode3, parNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAddInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TAdd taddNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        taddNode3 = (TAdd)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new AAddInst(poplabelNode2, taddNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASubInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TSub tsubNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tsubNode3 = (TSub)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new ASubInst(poplabelNode2, tsubNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AImulInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TImul timulNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        timulNode3 = (TImul)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new AImulInst(poplabelNode2, timulNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIdivInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TIdiv tidivNode3;
        PAr parNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tidivNode3 = (TIdiv)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);

        pinstNode1 = new AIdivInst(poplabelNode2, tidivNode3, parNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAndInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TAnd tandNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new AAndInst(poplabelNode2, tandNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AOrInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TOr torNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new AOrInst(poplabelNode2, torNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AXorInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TXor txorNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new AXorInst(poplabelNode2, txorNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANotInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TNot tnotNode3;
        PAr parNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tnotNode3 = (TNot)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);

        pinstNode1 = new ANotInst(poplabelNode2, tnotNode3, parNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ACmpInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TCmp tcmpNode3;
        PAr parNode4;
        TComma tcommaNode5;
        PAcr pacrNode6;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tcmpNode3 = (TCmp)nodeArrayList2.get(0);
        parNode4 = (PAr)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        pacrNode6 = (PAcr)nodeArrayList5.get(0);

        pinstNode1 = new ACmpInst(poplabelNode2, tcmpNode3, parNode4, tcommaNode5, pacrNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AJmpInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TJmp tjmpNode3;
        PLabel plabelNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tjmpNode3 = (TJmp)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pinstNode1 = new AJmpInst(poplabelNode2, tjmpNode3, plabelNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AJeInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TJe tjeNode3;
        PLabel plabelNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tjeNode3 = (TJe)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pinstNode1 = new AJeInst(poplabelNode2, tjeNode3, plabelNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AJneInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TJne tjneNode3;
        PLabel plabelNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tjneNode3 = (TJne)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pinstNode1 = new AJneInst(poplabelNode2, tjneNode3, plabelNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AJgInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TJg tjgNode3;
        PLabel plabelNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tjgNode3 = (TJg)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pinstNode1 = new AJgInst(poplabelNode2, tjgNode3, plabelNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AJgeInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TJge tjgeNode3;
        PLabel plabelNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tjgeNode3 = (TJge)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pinstNode1 = new AJgeInst(poplabelNode2, tjgeNode3, plabelNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AJlInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TJl tjlNode3;
        PLabel plabelNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tjlNode3 = (TJl)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pinstNode1 = new AJlInst(poplabelNode2, tjlNode3, plabelNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ACallInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TCall tcallNode3;
        PLabel plabelNode4;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tcallNode3 = (TCall)nodeArrayList2.get(0);
        plabelNode4 = (PLabel)nodeArrayList3.get(0);

        pinstNode1 = new ACallInst(poplabelNode2, tcallNode3, plabelNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ARetInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TRet tretNode3;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tretNode3 = (TRet)nodeArrayList2.get(0);

        pinstNode1 = new ARetInst(poplabelNode2, tretNode3);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AInterInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        POplabel poplabelNode2;
        TInt tintNode3;
        poplabelNode2 = (POplabel)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList2.get(0);

        pinstNode1 = new AInterInst(poplabelNode2, tintNode3);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAddressAcr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAcr pacrNode1;
        {
            // Block
        PAddress paddressNode2;
        paddressNode2 = (PAddress)nodeArrayList1.get(0);

        pacrNode1 = new AAddressAcr(paddressNode2);
        }
	nodeList.add(pacrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANumconstAcr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAcr pacrNode1;
        {
            // Block
        PNumconst pnumconstNode2;
        pnumconstNode2 = (PNumconst)nodeArrayList1.get(0);

        pacrNode1 = new ANumconstAcr(pnumconstNode2);
        }
	nodeList.add(pacrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ARegisterAcr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAcr pacrNode1;
        {
            // Block
        PRegister pregisterNode2;
        pregisterNode2 = (PRegister)nodeArrayList1.get(0);

        pacrNode1 = new ARegisterAcr(pregisterNode2);
        }
	nodeList.add(pacrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAddressAr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAr parNode1;
        {
            // Block
        PAddress paddressNode2;
        paddressNode2 = (PAddress)nodeArrayList1.get(0);

        parNode1 = new AAddressAr(paddressNode2);
        }
	nodeList.add(parNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ARegisterAr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAr parNode1;
        {
            // Block
        PRegister pregisterNode2;
        pregisterNode2 = (PRegister)nodeArrayList1.get(0);

        parNode1 = new ARegisterAr(pregisterNode2);
        }
	nodeList.add(parNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAddress */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddress paddressNode1;
        {
            // Block
        POpsizeof popsizeofNode2;
        TBrackopen tbrackopenNode3;
        PExp pexpNode4;
        TBrackclose tbrackcloseNode5;
        popsizeofNode2 = (POpsizeof)nodeArrayList1.get(0);
        tbrackopenNode3 = (TBrackopen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tbrackcloseNode5 = (TBrackclose)nodeArrayList4.get(0);

        paddressNode1 = new AAddress(popsizeofNode2, tbrackopenNode3, pexpNode4, tbrackcloseNode5);
        }
	nodeList.add(paddressNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AByteOpsizeof */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpsizeof popsizeofNode1;
        {
            // Block
        TByte tbyteNode2;
        tbyteNode2 = (TByte)nodeArrayList1.get(0);

        popsizeofNode1 = new AByteOpsizeof(tbyteNode2);
        }
	nodeList.add(popsizeofNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AWordOpsizeof */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpsizeof popsizeofNode1;
        {
            // Block
        TWord twordNode2;
        twordNode2 = (TWord)nodeArrayList1.get(0);

        popsizeofNode1 = new AWordOpsizeof(twordNode2);
        }
	nodeList.add(popsizeofNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ADwordOpsizeof */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpsizeof popsizeofNode1;
        {
            // Block
        TDword tdwordNode2;
        tdwordNode2 = (TDword)nodeArrayList1.get(0);

        popsizeofNode1 = new ADwordOpsizeof(tdwordNode2);
        }
	nodeList.add(popsizeofNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AEmptyOpsizeof */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POpsizeof popsizeofNode1;
        {
            // Block

        popsizeofNode1 = new AEmptyOpsizeof();
        }
	nodeList.add(popsizeofNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce APlusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TPlus tplusNode3;
        PExp1 pexp1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, tplusNode3, pexp1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMinusExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMinus tminusNode3;
        PExp1 pexp1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, tminusNode3, pexp1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANextExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp1 pexp1Node2;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);

        pexpNode1 = new ANextExp(pexp1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATimesExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp1 pexp1Node2;
        TTimes ttimesNode3;
        PExp2 pexp2Node4;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);
        ttimesNode3 = (TTimes)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp1Node1 = new ATimesExp1(pexp1Node2, ttimesNode3, pexp2Node4);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANextExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new ANextExp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ALabelExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PLabel plabelNode2;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);

        pexp2Node1 = new ALabelExp2(plabelNode2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANumconstExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PNumconst pnumconstNode2;
        pnumconstNode2 = (PNumconst)nodeArrayList1.get(0);

        pexp2Node1 = new ANumconstExp2(pnumconstNode2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ARegisterExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PRegister pregisterNode2;
        pregisterNode2 = (PRegister)nodeArrayList1.get(0);

        pexp2Node1 = new ARegisterExp2(pregisterNode2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANumconst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumconst pnumconstNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pnumconstNode1 = new ANumconst(tnumberNode2);
        }
	nodeList.add(pnumconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATempRegister */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRegister pregisterNode1;
        {
            // Block
        TPrefixRegister tprefixregisterNode2;
        TNumber tnumberNode3;
        tprefixregisterNode2 = (TPrefixRegister)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        pregisterNode1 = new ATempRegister(tprefixregisterNode2, tnumberNode3);
        }
	nodeList.add(pregisterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AEaxRegister */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRegister pregisterNode1;
        {
            // Block
        TEax teaxNode2;
        teaxNode2 = (TEax)nodeArrayList1.get(0);

        pregisterNode1 = new AEaxRegister(teaxNode2);
        }
	nodeList.add(pregisterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AEbxRegister */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRegister pregisterNode1;
        {
            // Block
        TEbx tebxNode2;
        tebxNode2 = (TEbx)nodeArrayList1.get(0);

        pregisterNode1 = new AEbxRegister(tebxNode2);
        }
	nodeList.add(pregisterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AEcxRegister */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRegister pregisterNode1;
        {
            // Block
        TEcx tecxNode2;
        tecxNode2 = (TEcx)nodeArrayList1.get(0);

        pregisterNode1 = new AEcxRegister(tecxNode2);
        }
	nodeList.add(pregisterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AEdxRegister */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRegister pregisterNode1;
        {
            // Block
        TEdx tedxNode2;
        tedxNode2 = (TEdx)nodeArrayList1.get(0);

        pregisterNode1 = new AEdxRegister(tedxNode2);
        }
	nodeList.add(pregisterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AEbpRegister */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRegister pregisterNode1;
        {
            // Block
        TEbp tebpNode2;
        tebpNode2 = (TEbp)nodeArrayList1.get(0);

        pregisterNode1 = new AEbpRegister(tebpNode2);
        }
	nodeList.add(pregisterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AEspRegister */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRegister pregisterNode1;
        {
            // Block
        TEsp tespNode2;
        tespNode2 = (TEsp)nodeArrayList1.get(0);

        pregisterNode1 = new AEspRegister(tespNode2);
        }
	nodeList.add(pregisterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ALabelOplabel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POplabel poplabelNode1;
        {
            // Block
        PLabel plabelNode2;
        TSemicol tsemicolNode3;
        plabelNode2 = (PLabel)nodeArrayList1.get(0);
        tsemicolNode3 = (TSemicol)nodeArrayList2.get(0);

        poplabelNode1 = new ALabelOplabel(plabelNode2, tsemicolNode3);
        }
	nodeList.add(poplabelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AEmptyOplabel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POplabel poplabelNode1;
        {
            // Block

        poplabelNode1 = new AEmptyOplabel();
        }
	nodeList.add(poplabelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ALabel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLabel plabelNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plabelNode1 = new ALabel(tidNode2);
        }
	nodeList.add(plabelNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 5}, {9, SHIFT, 1}, },
			{{-1, ERROR, 1}, {14, SHIFT, 5}, },
			{{-1, ERROR, 2}, {60, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {15, SHIFT, 6}, },
			{{-1, REDUCE, 5}, {9, SHIFT, 1}, },
			{{-1, ERROR, 5}, {7, SHIFT, 9}, },
			{{-1, ERROR, 6}, {16, SHIFT, 10}, {22, SHIFT, 11}, {28, SHIFT, 12}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 9}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 10}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 17}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 25}, {29, SHIFT, 22}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 14}, {7, SHIFT, 24}, },
			{{-1, REDUCE, 7}, {8, SHIFT, 25}, },
			{{-1, ERROR, 16}, {15, SHIFT, 26}, },
			{{-1, REDUCE, 10}, {59, SHIFT, 13}, },
			{{-1, ERROR, 18}, {17, SHIFT, 29}, {18, SHIFT, 30}, {19, SHIFT, 31}, {20, SHIFT, 32}, {21, SHIFT, 33}, },
			{{-1, ERROR, 19}, {15, SHIFT, 34}, },
			{{-1, REDUCE, 17}, {59, SHIFT, 13}, },
			{{-1, ERROR, 21}, {5, SHIFT, 37}, },
			{{-1, ERROR, 22}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 76}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 25}, {59, SHIFT, 13}, },
			{{-1, ERROR, 26}, {22, SHIFT, 44}, {28, SHIFT, 12}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 29}, {58, SHIFT, 45}, },
			{{-1, ERROR, 30}, {58, SHIFT, 45}, },
			{{-1, ERROR, 31}, {58, SHIFT, 45}, },
			{{-1, ERROR, 32}, {58, SHIFT, 45}, },
			{{-1, ERROR, 33}, {58, SHIFT, 45}, },
			{{-1, ERROR, 34}, {28, SHIFT, 12}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 37}, {23, SHIFT, 51}, {24, SHIFT, 52}, {25, SHIFT, 53}, {26, SHIFT, 54}, {27, SHIFT, 55}, },
			{{-1, REDUCE, 25}, {29, SHIFT, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 76}, {59, SHIFT, 13}, {60, REDUCE, 27}, },
			{{-1, ERROR, 41}, {30, SHIFT, 58}, {31, SHIFT, 59}, {32, SHIFT, 60}, {33, SHIFT, 61}, {34, SHIFT, 62}, {35, SHIFT, 63}, {36, SHIFT, 64}, {37, SHIFT, 65}, {38, SHIFT, 66}, {39, SHIFT, 67}, {40, SHIFT, 68}, {41, SHIFT, 69}, {42, SHIFT, 70}, {43, SHIFT, 71}, {44, SHIFT, 72}, {45, SHIFT, 73}, {46, SHIFT, 74}, {47, SHIFT, 75}, {49, SHIFT, 76}, {50, SHIFT, 77}, {51, SHIFT, 78}, },
			{{-1, ERROR, 42}, {5, SHIFT, 79}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 17}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 51}, {58, SHIFT, 81}, },
			{{-1, ERROR, 52}, {58, SHIFT, 82}, },
			{{-1, ERROR, 53}, {58, SHIFT, 83}, },
			{{-1, ERROR, 54}, {58, SHIFT, 84}, },
			{{-1, ERROR, 55}, {58, SHIFT, 85}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, },
			{{-1, ERROR, 70}, {59, SHIFT, 13}, },
			{{-1, ERROR, 71}, {59, SHIFT, 13}, },
			{{-1, ERROR, 72}, {59, SHIFT, 13}, },
			{{-1, ERROR, 73}, {59, SHIFT, 13}, },
			{{-1, ERROR, 74}, {59, SHIFT, 13}, },
			{{-1, ERROR, 75}, {59, SHIFT, 13}, },
			{{-1, ERROR, 76}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 80}, {15, SHIFT, 34}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 89}, {58, SHIFT, 122}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 96}, {6, SHIFT, 123}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 98}, {3, SHIFT, 124}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 105}, {6, SHIFT, 125}, },
			{{-1, ERROR, 106}, {6, SHIFT, 126}, },
			{{-1, ERROR, 107}, {6, SHIFT, 127}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 109}, {6, SHIFT, 128}, },
			{{-1, ERROR, 110}, {6, SHIFT, 129}, },
			{{-1, ERROR, 111}, {6, SHIFT, 130}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 113}, {6, SHIFT, 131}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, ERROR, 124}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 58}, {10, SHIFT, 86}, {11, SHIFT, 87}, {12, SHIFT, 88}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 133}, {0, SHIFT, 146}, {1, SHIFT, 147}, {4, SHIFT, 148}, },
			{{-1, REDUCE, 61}, {2, SHIFT, 149}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 146}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, {59, SHIFT, 13}, },
			{{-1, ERROR, 147}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 149}, {13, SHIFT, 89}, {52, SHIFT, 90}, {53, SHIFT, 91}, {54, SHIFT, 92}, {55, SHIFT, 93}, {56, SHIFT, 94}, {57, SHIFT, 95}, {58, SHIFT, 45}, {59, SHIFT, 13}, },
			{{-1, REDUCE, 59}, {2, SHIFT, 149}, },
			{{-1, REDUCE, 60}, {2, SHIFT, 149}, },
			{{-1, REDUCE, 62}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 8}, },
			{{-1, 4}, },
			{{-1, 14}, },
			{{-1, 16}, {17, 28}, },
			{{-1, 17}, },
			{{-1, 19}, {20, 36}, {44, 80}, },
			{{-1, 20}, },
			{{-1, 7}, {16, 27}, {19, 35}, {80, 121}, },
			{{-1, 23}, {38, 56}, },
			{{-1, 39}, {40, 57}, },
			{{-1, 40}, },
			{{-1, 100}, {123, 132}, {125, 139}, {126, 140}, {127, 141}, {128, 142}, {129, 143}, {130, 144}, {131, 145}, },
			{{-1, 96}, {60, 104}, {61, 105}, {62, 106}, {63, 107}, {64, 108}, {65, 109}, {66, 110}, {67, 111}, {68, 112}, {69, 113}, },
			{{-1, 97}, {59, 101}, {123, 101}, {125, 101}, {126, 101}, {127, 101}, {128, 101}, {129, 101}, {130, 101}, {131, 101}, },
			{{-1, 98}, },
			{{-1, 133}, },
			{{-1, 134}, {146, 150}, {147, 151}, },
			{{-1, 135}, {149, 152}, },
			{{-1, 102}, {29, 46}, {30, 47}, {31, 48}, {32, 49}, {33, 50}, {124, 136}, {146, 136}, {147, 136}, {149, 136}, },
			{{-1, 99}, {59, 103}, {123, 103}, {124, 137}, {125, 103}, {126, 103}, {127, 103}, {128, 103}, {129, 103}, {130, 103}, {131, 103}, {146, 137}, {147, 137}, {149, 137}, },
			{{-1, 41}, },
			{{-1, 138}, {9, 15}, {10, 18}, {11, 21}, {17, 18}, {20, 21}, {22, 38}, {23, 42}, {25, 43}, {40, 42}, {44, 21}, {70, 114}, {71, 115}, {72, 116}, {73, 117}, {74, 118}, {75, 119}, {76, 120}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '%', 'section'",
			"expecting: 'include'",
			"expecting: EOF",
			"expecting: 'section'",
			"expecting: '''",
			"expecting: '.data', '.bss', '.text'",
			"expecting: id",
			"expecting: 'section', id",
			"expecting: 'global', 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80', id",
			"expecting: '+', '-', '*', ']', ':', ''', '.', 'db', 'dw', 'dd', 'dq', 'dt', 'global', 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80', id, EOF",
			"expecting: ''', '.'",
			"expecting: 'db', 'dw', 'dd', 'dq', 'dt'",
			"expecting: ':'",
			"expecting: 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80', id",
			"expecting: '.bss', '.text'",
			"expecting: number",
			"expecting: '.text'",
			"expecting: 'resb', 'resw', 'resd', 'resq', 'rest'",
			"expecting: 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80', id, EOF",
			"expecting: 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80'",
			"expecting: '+', '-', '*', ']', 'section', 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80', id, EOF",
			"expecting: '[', 'byte', 'word', 'dword', '@', 'eax', 'ebx', 'ecx', 'edx', 'ebp', 'esp'",
			"expecting: '[', 'byte', 'word', 'dword', '@', 'eax', 'ebx', 'ecx', 'edx', 'ebp', 'esp', number",
			"expecting: '['",
			"expecting: '+', '-', '*', ']', ',', 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80', id, EOF",
			"expecting: ','",
			"expecting: ',', 'mov', 'push', 'pop', 'add', 'sub', 'imul', 'idiv', 'and', 'or', 'xor', 'not', 'cmp', 'jmp', 'je', 'jne', 'jg', 'jge', 'jl', 'call', 'ret', 'int 0x80', id, EOF",
			"expecting: '@', 'eax', 'ebx', 'ecx', 'edx', 'ebp', 'esp', number, id",
			"expecting: '+', '-', ']'",
			"expecting: '+', '-', '*', ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 4, 5, 2, 3, 6, 7, 7, 8, 9, 4, 10, 3, 7, 11, 3, 7, 12, 6, 13, 0, 6, 14, 2, 3, 15, 15, 15, 15, 15, 16, 2, 3, 17, 8, 2, 18, 19, 12, 4, 7, 20, 7, 7, 7, 7, 7, 15, 15, 15, 15, 15, 13, 2, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 6, 6, 6, 6, 6, 6, 6, 18, 18, 19, 3, 7, 7, 7, 7, 7, 23, 23, 23, 15, 24, 24, 24, 24, 24, 24, 25, 26, 23, 26, 18, 18, 18, 18, 18, 25, 25, 25, 18, 25, 25, 25, 18, 25, 18, 18, 18, 18, 18, 18, 18, 2, 24, 22, 27, 22, 22, 22, 22, 22, 22, 22, 18, 28, 29, 29, 29, 29, 29, 18, 18, 18, 18, 18, 18, 18, 27, 27, 26, 27, 29, 29, 29, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
