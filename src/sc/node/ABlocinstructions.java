/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ABlocinstructions extends PBlocinstructions
{
    private TAo _ao_;
    private PListeinstructions _listeinstructions_;
    private TAf _af_;

    public ABlocinstructions()
    {
        // Constructor
    }

    public ABlocinstructions(
        @SuppressWarnings("hiding") TAo _ao_,
        @SuppressWarnings("hiding") PListeinstructions _listeinstructions_,
        @SuppressWarnings("hiding") TAf _af_)
    {
        // Constructor
        setAo(_ao_);

        setListeinstructions(_listeinstructions_);

        setAf(_af_);

    }

    @Override
    public Object clone()
    {
        return new ABlocinstructions(
            cloneNode(this._ao_),
            cloneNode(this._listeinstructions_),
            cloneNode(this._af_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlocinstructions(this);
    }

    public TAo getAo()
    {
        return this._ao_;
    }

    public void setAo(TAo node)
    {
        if(this._ao_ != null)
        {
            this._ao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ao_ = node;
    }

    public PListeinstructions getListeinstructions()
    {
        return this._listeinstructions_;
    }

    public void setListeinstructions(PListeinstructions node)
    {
        if(this._listeinstructions_ != null)
        {
            this._listeinstructions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeinstructions_ = node;
    }

    public TAf getAf()
    {
        return this._af_;
    }

    public void setAf(TAf node)
    {
        if(this._af_ != null)
        {
            this._af_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._af_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ao_)
            + toString(this._listeinstructions_)
            + toString(this._af_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ao_ == child)
        {
            this._ao_ = null;
            return;
        }

        if(this._listeinstructions_ == child)
        {
            this._listeinstructions_ = null;
            return;
        }

        if(this._af_ == child)
        {
            this._af_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ao_ == oldChild)
        {
            setAo((TAo) newChild);
            return;
        }

        if(this._listeinstructions_ == oldChild)
        {
            setListeinstructions((PListeinstructions) newChild);
            return;
        }

        if(this._af_ == oldChild)
        {
            setAf((TAf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
