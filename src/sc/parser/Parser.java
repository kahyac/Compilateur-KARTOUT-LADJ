/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ADecvar1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AVide1Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ARestedecvarListedecvar2 */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AVideListedecvar2 */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AVarsimpleVariable */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AVartabVariable */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AEntierTypevar */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ABooleanTypevar */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce ADecfonctionListedecfonc */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AVideListedecfonc */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ADecvar1$Decvar2$Typevar1Fonction */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce ADecvar1$Decvar2$Vide1Fonction */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce ADecvar1$Vide2$Typevar1Fonction */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ADecvar1$Vide2$Vide1Fonction */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AVide1$Decvar2$Typevar1Fonction */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AVide1$Decvar2$Vide1Fonction */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AVide1$Vide2$Typevar1Fonction */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AVide1$Vide2$Vide1Fonction */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce ABlocinstructions */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AInstructionsListeinstructions */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AVideListeinstructions */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AAffectationInstruction */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ATantqueInstruction */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ASialorsInstruction */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce ASisinonInstruction */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce ARetourInstruction */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AAppelfonctionInstruction */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AEcrireInstruction */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AFairetantqueInstruction */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list);
            }
            break;
            case 29: /* reduce AIdentificateurVar */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce ACasetableauVar */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list);
            }
            break;
            case 31: /* reduce AListeparametresListeexpressions */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AVideListeexpressions */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list);
            }
            break;
            case 33: /* reduce AResteparametrescommencantvirguleListeexpressions2 */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AVideListeexpressions2 */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list);
            }
            break;
            case 35: /* reduce AOuExpression */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AExpression2Expression */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list);
            }
            break;
            case 37: /* reduce AEtExpression2 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AExpression3Expression2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce AEgalExpression3 */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce AInferieurExpression3 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce AExpression4Expression3 */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce APlusExpression4 */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AMoinsExpression4 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AExpression5Expression4 */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce AMultExpression5 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce ADivExpression5 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AExpression6Expression5 */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce ANonExpression6 */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce AExpressioncarreExpression6 */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list);
            }
            break;
            case 50: /* reduce ACarreExpressioncarre */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AExpression7Expressioncarre */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list);
            }
            break;
            case 52: /* reduce AParenthesesExpression7 */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce AVarExpression7 */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce ANombreExpression7 */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list);
            }
            break;
            case 55: /* reduce AAppelfonction2Expression7 */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list);
            }
            break;
            case 56: /* reduce ALireExpression7 */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce AVraiExpression7 */
            {
                ArrayList<Object> list = new57();
                push(goTo(19), list);
            }
            break;
            case 58: /* reduce AFauxExpression7 */
            {
                ArrayList<Object> list = new58();
                push(goTo(19), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADecvar1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        PListedecfonc plistedecfoncNode5;
        {
            // Block
        PVariable pvariableNode3;
        PListedecvar2 plistedecvar2Node4;
        pvariableNode3 = (PVariable)nodeArrayList1.get(0);
        plistedecvar2Node4 = (PListedecvar2)nodeArrayList2.get(0);

        plistedecvarNode2 = new ADecvarListedecvar(pvariableNode3, plistedecvar2Node4);
        }
        plistedecfoncNode5 = (PListedecfonc)nodeArrayList3.get(0);

        pprogrammeNode1 = new AProgramme(plistedecvarNode2, plistedecfoncNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AVide1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        PListedecfonc plistedecfoncNode3;
        {
            // Block

        plistedecvarNode2 = new AVideListedecvar();
        }
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList1.get(0);

        pprogrammeNode1 = new AProgramme(plistedecvarNode2, plistedecfoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ARestedecvarListedecvar2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvar2 plistedecvar2Node1;
        {
            // Block
        TVirgule tvirguleNode2;
        PVariable pvariableNode3;
        PListedecvar2 plistedecvar2Node4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);
        plistedecvar2Node4 = (PListedecvar2)nodeArrayList3.get(0);

        plistedecvar2Node1 = new ARestedecvarListedecvar2(tvirguleNode2, pvariableNode3, plistedecvar2Node4);
        }
	nodeList.add(plistedecvar2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVideListedecvar2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecvar2 plistedecvar2Node1;
        {
            // Block

        plistedecvar2Node1 = new AVideListedecvar2();
        }
	nodeList.add(plistedecvar2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVarsimpleVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PTypevar ptypevarNode2;
        TIdentif tidentifNode3;
        ptypevarNode2 = (PTypevar)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pvariableNode1 = new AVarsimpleVariable(ptypevarNode2, tidentifNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVartabVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PTypevar ptypevarNode2;
        TIdentif tidentifNode3;
        TCo tcoNode4;
        TNombre tnombreNode5;
        TCf tcfNode6;
        ptypevarNode2 = (PTypevar)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcfNode6 = (TCf)nodeArrayList5.get(0);

        pvariableNode1 = new AVartabVariable(ptypevarNode2, tidentifNode3, tcoNode4, tnombreNode5, tcfNode6);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEntierTypevar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypevar ptypevarNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypevarNode1 = new AEntierTypevar(tentierNode2);
        }
	nodeList.add(ptypevarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABooleanTypevar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypevar ptypevarNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypevarNode1 = new ABooleanTypevar(tboolNode2);
        }
	nodeList.add(ptypevarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADecfonctionListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecfonc plistedecfoncNode1;
        {
            // Block
        PFonction pfonctionNode2;
        PListedecfonc plistedecfoncNode3;
        pfonctionNode2 = (PFonction)nodeArrayList1.get(0);
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList2.get(0);

        plistedecfoncNode1 = new ADecfonctionListedecfonc(pfonctionNode2, plistedecfoncNode3);
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVideListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecfonc plistedecfoncNode1;
        {
            // Block

        plistedecfoncNode1 = new AVideListedecfonc();
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADecvar1$Decvar2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TPo tpoNode5;
        PListedecvar plistedecvarNode6;
        TPf tpfNode9;
        PListedecvar plistedecvarNode10;
        PBlocinstructions pblocinstructionsNode13;
        {
            // Block
        PTypevar ptypevarNode3;
        ptypevarNode3 = (PTypevar)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypevarNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tpoNode5 = (TPo)nodeArrayList3.get(0);
        {
            // Block
        PVariable pvariableNode7;
        PListedecvar2 plistedecvar2Node8;
        pvariableNode7 = (PVariable)nodeArrayList4.get(0);
        plistedecvar2Node8 = (PListedecvar2)nodeArrayList5.get(0);

        plistedecvarNode6 = new ADecvarListedecvar(pvariableNode7, plistedecvar2Node8);
        }
        tpfNode9 = (TPf)nodeArrayList6.get(0);
        {
            // Block
        PVariable pvariableNode11;
        PListedecvar2 plistedecvar2Node12;
        pvariableNode11 = (PVariable)nodeArrayList7.get(0);
        plistedecvar2Node12 = (PListedecvar2)nodeArrayList8.get(0);

        plistedecvarNode10 = new ADecvarListedecvar(pvariableNode11, plistedecvar2Node12);
        }
        pblocinstructionsNode13 = (PBlocinstructions)nodeArrayList9.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode4, tpoNode5, plistedecvarNode6, tpfNode9, plistedecvarNode10, pblocinstructionsNode13);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADecvar1$Decvar2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TPo tpoNode4;
        PListedecvar plistedecvarNode5;
        TPf tpfNode8;
        PListedecvar plistedecvarNode9;
        PBlocinstructions pblocinstructionsNode12;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tpoNode4 = (TPo)nodeArrayList2.get(0);
        {
            // Block
        PVariable pvariableNode6;
        PListedecvar2 plistedecvar2Node7;
        pvariableNode6 = (PVariable)nodeArrayList3.get(0);
        plistedecvar2Node7 = (PListedecvar2)nodeArrayList4.get(0);

        plistedecvarNode5 = new ADecvarListedecvar(pvariableNode6, plistedecvar2Node7);
        }
        tpfNode8 = (TPf)nodeArrayList5.get(0);
        {
            // Block
        PVariable pvariableNode10;
        PListedecvar2 plistedecvar2Node11;
        pvariableNode10 = (PVariable)nodeArrayList6.get(0);
        plistedecvar2Node11 = (PListedecvar2)nodeArrayList7.get(0);

        plistedecvarNode9 = new ADecvarListedecvar(pvariableNode10, plistedecvar2Node11);
        }
        pblocinstructionsNode12 = (PBlocinstructions)nodeArrayList8.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode3, tpoNode4, plistedecvarNode5, tpfNode8, plistedecvarNode9, pblocinstructionsNode12);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADecvar1$Vide2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TPo tpoNode5;
        PListedecvar plistedecvarNode6;
        TPf tpfNode9;
        PListedecvar plistedecvarNode10;
        PBlocinstructions pblocinstructionsNode11;
        {
            // Block
        PTypevar ptypevarNode3;
        ptypevarNode3 = (PTypevar)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypevarNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tpoNode5 = (TPo)nodeArrayList3.get(0);
        {
            // Block
        PVariable pvariableNode7;
        PListedecvar2 plistedecvar2Node8;
        pvariableNode7 = (PVariable)nodeArrayList4.get(0);
        plistedecvar2Node8 = (PListedecvar2)nodeArrayList5.get(0);

        plistedecvarNode6 = new ADecvarListedecvar(pvariableNode7, plistedecvar2Node8);
        }
        tpfNode9 = (TPf)nodeArrayList6.get(0);
        {
            // Block

        plistedecvarNode10 = new AVideListedecvar();
        }
        pblocinstructionsNode11 = (PBlocinstructions)nodeArrayList7.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode4, tpoNode5, plistedecvarNode6, tpfNode9, plistedecvarNode10, pblocinstructionsNode11);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADecvar1$Vide2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TPo tpoNode4;
        PListedecvar plistedecvarNode5;
        TPf tpfNode8;
        PListedecvar plistedecvarNode9;
        PBlocinstructions pblocinstructionsNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tpoNode4 = (TPo)nodeArrayList2.get(0);
        {
            // Block
        PVariable pvariableNode6;
        PListedecvar2 plistedecvar2Node7;
        pvariableNode6 = (PVariable)nodeArrayList3.get(0);
        plistedecvar2Node7 = (PListedecvar2)nodeArrayList4.get(0);

        plistedecvarNode5 = new ADecvarListedecvar(pvariableNode6, plistedecvar2Node7);
        }
        tpfNode8 = (TPf)nodeArrayList5.get(0);
        {
            // Block

        plistedecvarNode9 = new AVideListedecvar();
        }
        pblocinstructionsNode10 = (PBlocinstructions)nodeArrayList6.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode3, tpoNode4, plistedecvarNode5, tpfNode8, plistedecvarNode9, pblocinstructionsNode10);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVide1$Decvar2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TPo tpoNode5;
        PListedecvar plistedecvarNode6;
        TPf tpfNode7;
        PListedecvar plistedecvarNode8;
        PBlocinstructions pblocinstructionsNode11;
        {
            // Block
        PTypevar ptypevarNode3;
        ptypevarNode3 = (PTypevar)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypevarNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tpoNode5 = (TPo)nodeArrayList3.get(0);
        {
            // Block

        plistedecvarNode6 = new AVideListedecvar();
        }
        tpfNode7 = (TPf)nodeArrayList4.get(0);
        {
            // Block
        PVariable pvariableNode9;
        PListedecvar2 plistedecvar2Node10;
        pvariableNode9 = (PVariable)nodeArrayList5.get(0);
        plistedecvar2Node10 = (PListedecvar2)nodeArrayList6.get(0);

        plistedecvarNode8 = new ADecvarListedecvar(pvariableNode9, plistedecvar2Node10);
        }
        pblocinstructionsNode11 = (PBlocinstructions)nodeArrayList7.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode4, tpoNode5, plistedecvarNode6, tpfNode7, plistedecvarNode8, pblocinstructionsNode11);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVide1$Decvar2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TPo tpoNode4;
        PListedecvar plistedecvarNode5;
        TPf tpfNode6;
        PListedecvar plistedecvarNode7;
        PBlocinstructions pblocinstructionsNode10;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tpoNode4 = (TPo)nodeArrayList2.get(0);
        {
            // Block

        plistedecvarNode5 = new AVideListedecvar();
        }
        tpfNode6 = (TPf)nodeArrayList3.get(0);
        {
            // Block
        PVariable pvariableNode8;
        PListedecvar2 plistedecvar2Node9;
        pvariableNode8 = (PVariable)nodeArrayList4.get(0);
        plistedecvar2Node9 = (PListedecvar2)nodeArrayList5.get(0);

        plistedecvarNode7 = new ADecvarListedecvar(pvariableNode8, plistedecvar2Node9);
        }
        pblocinstructionsNode10 = (PBlocinstructions)nodeArrayList6.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode3, tpoNode4, plistedecvarNode5, tpfNode6, plistedecvarNode7, pblocinstructionsNode10);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVide1$Vide2$Typevar1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode4;
        TPo tpoNode5;
        PListedecvar plistedecvarNode6;
        TPf tpfNode7;
        PListedecvar plistedecvarNode8;
        PBlocinstructions pblocinstructionsNode9;
        {
            // Block
        PTypevar ptypevarNode3;
        ptypevarNode3 = (PTypevar)nodeArrayList1.get(0);

        ptypeoptionnelNode2 = new ATypevarTypeoptionnel(ptypevarNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tpoNode5 = (TPo)nodeArrayList3.get(0);
        {
            // Block

        plistedecvarNode6 = new AVideListedecvar();
        }
        tpfNode7 = (TPf)nodeArrayList4.get(0);
        {
            // Block

        plistedecvarNode8 = new AVideListedecvar();
        }
        pblocinstructionsNode9 = (PBlocinstructions)nodeArrayList5.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode4, tpoNode5, plistedecvarNode6, tpfNode7, plistedecvarNode8, pblocinstructionsNode9);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AVide1$Vide2$Vide1Fonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonction pfonctionNode1;
        {
            // Block
        PTypeoptionnel ptypeoptionnelNode2;
        TIdentif tidentifNode3;
        TPo tpoNode4;
        PListedecvar plistedecvarNode5;
        TPf tpfNode6;
        PListedecvar plistedecvarNode7;
        PBlocinstructions pblocinstructionsNode8;
        {
            // Block

        ptypeoptionnelNode2 = new AVideTypeoptionnel();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tpoNode4 = (TPo)nodeArrayList2.get(0);
        {
            // Block

        plistedecvarNode5 = new AVideListedecvar();
        }
        tpfNode6 = (TPf)nodeArrayList3.get(0);
        {
            // Block

        plistedecvarNode7 = new AVideListedecvar();
        }
        pblocinstructionsNode8 = (PBlocinstructions)nodeArrayList4.get(0);

        pfonctionNode1 = new AFonction(ptypeoptionnelNode2, tidentifNode3, tpoNode4, plistedecvarNode5, tpfNode6, plistedecvarNode7, pblocinstructionsNode8);
        }
	nodeList.add(pfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABlocinstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocinstructions pblocinstructionsNode1;
        {
            // Block
        TAo taoNode2;
        PListeinstructions plisteinstructionsNode3;
        TAf tafNode4;
        taoNode2 = (TAo)nodeArrayList1.get(0);
        plisteinstructionsNode3 = (PListeinstructions)nodeArrayList2.get(0);
        tafNode4 = (TAf)nodeArrayList3.get(0);

        pblocinstructionsNode1 = new ABlocinstructions(taoNode2, plisteinstructionsNode3, tafNode4);
        }
	nodeList.add(pblocinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AInstructionsListeinstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeinstructions plisteinstructionsNode1;
        {
            // Block
        PInstruction pinstructionNode2;
        PListeinstructions plisteinstructionsNode3;
        pinstructionNode2 = (PInstruction)nodeArrayList1.get(0);
        plisteinstructionsNode3 = (PListeinstructions)nodeArrayList2.get(0);

        plisteinstructionsNode1 = new AInstructionsListeinstructions(pinstructionNode2, plisteinstructionsNode3);
        }
	nodeList.add(plisteinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVideListeinstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeinstructions plisteinstructionsNode1;
        {
            // Block

        plisteinstructionsNode1 = new AVideListeinstructions();
        }
	nodeList.add(plisteinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExpression pexpressionNode4;
        TPointvirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointvirgule)nodeArrayList4.get(0);

        pinstructionNode1 = new AAffectationInstruction(pvarNode2, tegalNode3, pexpressionNode4, tpointvirguleNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ATantqueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExpression pexpressionNode3;
        TFaire tfaireNode4;
        PBlocinstructions pblocinstructionsNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocinstructions)nodeArrayList4.get(0);

        pinstructionNode1 = new ATantqueInstruction(ttantqueNode2, pexpressionNode3, tfaireNode4, pblocinstructionsNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASialorsInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBlocinstructions pblocinstructionsNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocinstructions)nodeArrayList4.get(0);

        pinstructionNode1 = new ASialorsInstruction(tsiNode2, pexpressionNode3, talorsNode4, pblocinstructionsNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASisinonInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PBlocinstructions pblocinstructionsNode5;
        TSinon tsinonNode6;
        PBlocinstructions pblocinstructionsNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocinstructionsNode5 = (PBlocinstructions)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pblocinstructionsNode7 = (PBlocinstructions)nodeArrayList6.get(0);

        pinstructionNode1 = new ASisinonInstruction(tsiNode2, pexpressionNode3, talorsNode4, pblocinstructionsNode5, tsinonNode6, pblocinstructionsNode7);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARetourInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpression pexpressionNode3;
        TPointvirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointvirgule)nodeArrayList3.get(0);

        pinstructionNode1 = new ARetourInstruction(tretourNode2, pexpressionNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAppelfonctionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TPo tpoNode3;
        PListeexpressions plisteexpressionsNode4;
        TPf tpfNode5;
        TPointvirgule tpointvirguleNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        plisteexpressionsNode4 = (PListeexpressions)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointvirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AAppelfonctionInstruction(tidentifNode2, tpoNode3, plisteexpressionsNode4, tpfNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEcrireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TPo tpoNode3;
        PExpression pexpressionNode4;
        TPf tpfNode5;
        TPointvirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointvirgule)nodeArrayList5.get(0);

        pinstructionNode1 = new AEcrireInstruction(tecrireNode2, tpoNode3, pexpressionNode4, tpfNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AFairetantqueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        TFaire tfaireNode2;
        PBlocinstructions pblocinstructionsNode3;
        TTantque ttantqueNode4;
        PExpression pexpressionNode5;
        tfaireNode2 = (TFaire)nodeArrayList1.get(0);
        pblocinstructionsNode3 = (PBlocinstructions)nodeArrayList2.get(0);
        ttantqueNode4 = (TTantque)nodeArrayList3.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList4.get(0);

        pinstructionNode1 = new AFairetantqueInstruction(tfaireNode2, pblocinstructionsNode3, ttantqueNode4, pexpressionNode5);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIdentificateurVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarNode1 = new AIdentificateurVar(tidentifNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ACasetableauVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCo tcoNode3;
        PExpression pexpressionNode4;
        TCf tcfNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tcoNode3 = (TCo)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tcfNode5 = (TCf)nodeArrayList4.get(0);

        pvarNode1 = new ACasetableauVar(tidentifNode2, tcoNode3, pexpressionNode4, tcfNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AListeparametresListeexpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexpressions plisteexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PListeexpressions2 plisteexpressions2Node3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        plisteexpressions2Node3 = (PListeexpressions2)nodeArrayList2.get(0);

        plisteexpressionsNode1 = new AListeparametresListeexpressions(pexpressionNode2, plisteexpressions2Node3);
        }
	nodeList.add(plisteexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AVideListeexpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeexpressions plisteexpressionsNode1;
        {
            // Block

        plisteexpressionsNode1 = new AVideListeexpressions();
        }
	nodeList.add(plisteexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AResteparametrescommencantvirguleListeexpressions2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexpressions2 plisteexpressions2Node1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpression pexpressionNode3;
        PListeexpressions2 plisteexpressions2Node4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        plisteexpressions2Node4 = (PListeexpressions2)nodeArrayList3.get(0);

        plisteexpressions2Node1 = new AResteparametrescommencantvirguleListeexpressions2(tvirguleNode2, pexpressionNode3, plisteexpressions2Node4);
        }
	nodeList.add(plisteexpressions2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVideListeexpressions2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeexpressions2 plisteexpressions2Node1;
        {
            // Block

        plisteexpressions2Node1 = new AVideListeexpressions2();
        }
	nodeList.add(plisteexpressions2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AOuExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOu touNode3;
        PExpression2 pexpression2Node4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpression2Node4 = (PExpression2)nodeArrayList3.get(0);

        pexpressionNode1 = new AOuExpression(pexpressionNode2, touNode3, pexpression2Node4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExpression2Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression2 pexpression2Node2;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression2Expression(pexpression2Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AEtExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        TEt tetNode3;
        PExpression3 pexpression3Node4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexpression3Node4 = (PExpression3)nodeArrayList3.get(0);

        pexpression2Node1 = new AEtExpression2(pexpression2Node2, tetNode3, pexpression3Node4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExpression3Expression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);

        pexpression2Node1 = new AExpression3Expression2(pexpression3Node2);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AEgalExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TEgal tegalNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new AEgalExpression3(pexpression3Node2, tegalNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AInferieurExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TInferieur tinferieurNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tinferieurNode3 = (TInferieur)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new AInferieurExpression3(pexpression3Node2, tinferieurNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpression4Expression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);

        pexpression3Node1 = new AExpression4Expression3(pexpression4Node2);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce APlusExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        TPlus tplusNode3;
        PExpression5 pexpression5Node4;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpression5Node4 = (PExpression5)nodeArrayList3.get(0);

        pexpression4Node1 = new APlusExpression4(pexpression4Node2, tplusNode3, pexpression5Node4);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMoinsExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        TMoins tmoinsNode3;
        PExpression5 pexpression5Node4;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexpression5Node4 = (PExpression5)nodeArrayList3.get(0);

        pexpression4Node1 = new AMoinsExpression4(pexpression4Node2, tmoinsNode3, pexpression5Node4);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpression5Expression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);

        pexpression4Node1 = new AExpression5Expression4(pexpression5Node2);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMultExpression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        TMult tmultNode3;
        PExpression6 pexpression6Node4;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpression6Node4 = (PExpression6)nodeArrayList3.get(0);

        pexpression5Node1 = new AMultExpression5(pexpression5Node2, tmultNode3, pexpression6Node4);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ADivExpression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression5 pexpression5Node2;
        TDiv tdivNode3;
        PExpression6 pexpression6Node4;
        pexpression5Node2 = (PExpression5)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpression6Node4 = (PExpression6)nodeArrayList3.get(0);

        pexpression5Node1 = new ADivExpression5(pexpression5Node2, tdivNode3, pexpression6Node4);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpression6Expression5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression5 pexpression5Node1;
        {
            // Block
        PExpression6 pexpression6Node2;
        pexpression6Node2 = (PExpression6)nodeArrayList1.get(0);

        pexpression5Node1 = new AExpression6Expression5(pexpression6Node2);
        }
	nodeList.add(pexpression5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ANonExpression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        TNon tnonNode2;
        PExpression6 pexpression6Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexpression6Node3 = (PExpression6)nodeArrayList2.get(0);

        pexpression6Node1 = new ANonExpression6(tnonNode2, pexpression6Node3);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExpressioncarreExpression6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression6 pexpression6Node1;
        {
            // Block
        PExpressioncarre pexpressioncarreNode2;
        pexpressioncarreNode2 = (PExpressioncarre)nodeArrayList1.get(0);

        pexpression6Node1 = new AExpressioncarreExpression6(pexpressioncarreNode2);
        }
	nodeList.add(pexpression6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ACarreExpressioncarre */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressioncarre pexpressioncarreNode1;
        {
            // Block
        PExpression7 pexpression7Node2;
        TCarre tcarreNode3;
        pexpression7Node2 = (PExpression7)nodeArrayList1.get(0);
        tcarreNode3 = (TCarre)nodeArrayList2.get(0);

        pexpressioncarreNode1 = new ACarreExpressioncarre(pexpression7Node2, tcarreNode3);
        }
	nodeList.add(pexpressioncarreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AExpression7Expressioncarre */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressioncarre pexpressioncarreNode1;
        {
            // Block
        PExpression7 pexpression7Node2;
        pexpression7Node2 = (PExpression7)nodeArrayList1.get(0);

        pexpressioncarreNode1 = new AExpression7Expressioncarre(pexpression7Node2);
        }
	nodeList.add(pexpressioncarreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AParenthesesExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TPo tpoNode2;
        PExpression pexpressionNode3;
        TPf tpfNode4;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpfNode4 = (TPf)nodeArrayList3.get(0);

        pexpression7Node1 = new AParenthesesExpression7(tpoNode2, pexpressionNode3, tpfNode4);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AVarExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpression7Node1 = new AVarExpression7(pvarNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANombreExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexpression7Node1 = new ANombreExpression7(tnombreNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAppelfonction2Expression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TIdentif tidentifNode2;
        TPo tpoNode3;
        PListeexpressions plisteexpressionsNode4;
        TPf tpfNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        plisteexpressionsNode4 = (PListeexpressions)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pexpression7Node1 = new AAppelfonction2Expression7(tidentifNode2, tpoNode3, plisteexpressionsNode4, tpfNode5);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ALireExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TLire tlireNode2;
        TPo tpoNode3;
        TPf tpfNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        tpfNode4 = (TPf)nodeArrayList3.get(0);

        pexpression7Node1 = new ALireExpression7(tlireNode2, tpoNode3, tpfNode4);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AVraiExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pexpression7Node1 = new AVraiExpression7(tvraiNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AFauxExpression7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression7 pexpression7Node1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pexpression7Node1 = new AFauxExpression7(tfauxNode2);
        }
	nodeList.add(pexpression7Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 9}, {2, SHIFT, 1}, {3, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 3}, {27, SHIFT, 9}, },
			{{-1, ERROR, 4}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, ERROR, 6}, {31, SHIFT, 12}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 9}, {2, SHIFT, 1}, {3, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, ERROR, 9}, {2, SHIFT, 1}, {3, SHIFT, 2}, {28, SHIFT, 15}, },
			{{-1, ERROR, 10}, {2, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 9}, {2, SHIFT, 1}, {3, SHIFT, 2}, {31, SHIFT, 3}, },
			{{-1, REDUCE, 4}, {25, SHIFT, 20}, {27, SHIFT, 21}, },
			{{-1, ERROR, 13}, {31, SHIFT, 22}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 15}, {2, SHIFT, 1}, {3, SHIFT, 2}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, ERROR, 17}, {31, SHIFT, 27}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 20}, {1, SHIFT, 29}, },
			{{-1, ERROR, 21}, {2, SHIFT, 1}, {3, SHIFT, 2}, {28, SHIFT, 30}, },
			{{-1, ERROR, 22}, {27, SHIFT, 21}, },
			{{-1, REDUCE, 20}, {5, SHIFT, 32}, {6, SHIFT, 33}, {7, SHIFT, 34}, {10, SHIFT, 35}, {12, SHIFT, 36}, {31, SHIFT, 37}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 26}, {28, SHIFT, 42}, },
			{{-1, REDUCE, 4}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 29}, {26, SHIFT, 43}, },
			{{-1, ERROR, 30}, {2, SHIFT, 1}, {3, SHIFT, 2}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, ERROR, 32}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 33}, {29, SHIFT, 23}, },
			{{-1, ERROR, 34}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 35}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 36}, {27, SHIFT, 66}, },
			{{-1, REDUCE, 29}, {25, SHIFT, 67}, {27, SHIFT, 68}, },
			{{-1, ERROR, 38}, {30, SHIFT, 69}, },
			{{-1, REDUCE, 20}, {5, SHIFT, 32}, {6, SHIFT, 33}, {7, SHIFT, 34}, {10, SHIFT, 35}, {12, SHIFT, 36}, {31, SHIFT, 37}, },
			{{-1, ERROR, 40}, {4, SHIFT, 71}, },
			{{-1, ERROR, 41}, {29, SHIFT, 23}, },
			{{-1, ERROR, 42}, {2, SHIFT, 1}, {3, SHIFT, 2}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 46}, {28, SHIFT, 76}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 48}, {27, SHIFT, 77}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 51}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 52}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 29}, {25, SHIFT, 67}, {27, SHIFT, 80}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 55}, {6, SHIFT, 81}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 36}, {17, SHIFT, 83}, },
			{{-1, REDUCE, 38}, {4, SHIFT, 84}, {18, SHIFT, 85}, },
			{{-1, REDUCE, 41}, {19, SHIFT, 86}, {20, SHIFT, 87}, },
			{{-1, REDUCE, 44}, {21, SHIFT, 88}, {23, SHIFT, 89}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, {22, SHIFT, 90}, },
			{{-1, ERROR, 63}, {5, SHIFT, 91}, },
			{{-1, ERROR, 64}, {8, SHIFT, 92}, {16, SHIFT, 82}, },
			{{-1, ERROR, 65}, {11, SHIFT, 93}, {16, SHIFT, 82}, },
			{{-1, ERROR, 66}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 67}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 32}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 71}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 75}, {29, SHIFT, 23}, },
			{{-1, ERROR, 76}, {2, SHIFT, 1}, {3, SHIFT, 2}, {29, SHIFT, 23}, },
			{{-1, ERROR, 77}, {28, SHIFT, 103}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 79}, {16, SHIFT, 82}, {28, SHIFT, 104}, },
			{{-1, REDUCE, 32}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 81}, {29, SHIFT, 23}, },
			{{-1, ERROR, 82}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 83}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 84}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 85}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 86}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 87}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 88}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 89}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 91}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 92}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 94}, {16, SHIFT, 82}, {28, SHIFT, 117}, },
			{{-1, ERROR, 95}, {16, SHIFT, 82}, {26, SHIFT, 118}, },
			{{-1, ERROR, 96}, {28, SHIFT, 119}, },
			{{-1, REDUCE, 34}, {0, SHIFT, 120}, {16, SHIFT, 82}, },
			{{-1, ERROR, 98}, {11, SHIFT, 122}, {16, SHIFT, 82}, },
			{{-1, ERROR, 99}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 105}, {28, SHIFT, 125}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 35}, {17, SHIFT, 83}, },
			{{-1, REDUCE, 37}, {4, SHIFT, 84}, {18, SHIFT, 85}, },
			{{-1, REDUCE, 39}, {19, SHIFT, 86}, {20, SHIFT, 87}, },
			{{-1, REDUCE, 40}, {19, SHIFT, 86}, {20, SHIFT, 87}, },
			{{-1, REDUCE, 42}, {21, SHIFT, 88}, {23, SHIFT, 89}, },
			{{-1, REDUCE, 43}, {21, SHIFT, 88}, {23, SHIFT, 89}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 28}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 23}, {9, SHIFT, 126}, },
			{{-1, ERROR, 117}, {11, SHIFT, 127}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 119}, {11, SHIFT, 128}, },
			{{-1, ERROR, 120}, {1, SHIFT, 47}, {13, SHIFT, 48}, {14, SHIFT, 49}, {15, SHIFT, 50}, {24, SHIFT, 51}, {27, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 124}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 126}, {29, SHIFT, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 34}, {0, SHIFT, 120}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 33}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 11}, {16, 26}, {18, 28}, {24, 41}, {31, 46}, {44, 75}, {73, 99}, {101, 124}, },
			{{-1, 5}, {9, 16}, {10, 18}, {15, 24}, {21, 31}, {30, 44}, {42, 73}, {76, 101}, },
			{{-1, 17}, {0, 6}, {8, 13}, {11, 13}, },
			{{-1, 7}, {8, 14}, {11, 19}, },
			{{-1, 8}, },
			{{-1, 25}, {30, 45}, {33, 63}, {41, 72}, {42, 74}, {75, 100}, {76, 102}, {81, 106}, {92, 116}, {99, 123}, {124, 130}, {126, 131}, },
			{{-1, 38}, {39, 70}, },
			{{-1, 39}, },
			{{-1, 54}, {23, 40}, {39, 40}, },
			{{-1, 96}, {80, 105}, },
			{{-1, 121}, {129, 132}, },
			{{-1, 97}, {32, 55}, {34, 64}, {35, 65}, {52, 79}, {66, 94}, {67, 95}, {71, 98}, {91, 115}, {120, 129}, },
			{{-1, 56}, {82, 107}, },
			{{-1, 57}, {83, 108}, },
			{{-1, 58}, {84, 109}, {85, 110}, },
			{{-1, 59}, {86, 111}, {87, 112}, },
			{{-1, 60}, {51, 78}, {88, 113}, {89, 114}, },
			{{-1, 61}, },
			{{-1, 62}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', 'bool', identif, EOF",
			"expecting: identif",
			"expecting: '('",
			"expecting: EOF",
			"expecting: ',', 'entier', 'bool', identif, EOF",
			"expecting: 'entier', 'bool', ')'",
			"expecting: 'entier', 'bool'",
			"expecting: ',', 'entier', 'bool', '[', '(', identif, EOF",
			"expecting: 'entier', 'bool', '{'",
			"expecting: ',', ')'",
			"expecting: ',', 'entier', 'bool', ')', '{', identif, EOF",
			"expecting: nombre",
			"expecting: 'tantque', 'faire', 'si', 'retour', 'ecrire', '}', identif",
			"expecting: ',', '{'",
			"expecting: ')'",
			"expecting: ',', 'entier', 'bool', '[', ')', '{', identif, EOF",
			"expecting: 'entier', 'bool', ')', '{', identif, EOF",
			"expecting: ']'",
			"expecting: nombre, 'lire', 'vrai', 'faux', '!', '(', identif",
			"expecting: '{'",
			"expecting: '=', '[', '('",
			"expecting: '}'",
			"expecting: '='",
			"expecting: ',', '=', 'tantque', 'faire', 'si', 'alors', 'retour', ';', 'ecrire', '|', '&', '<', '+', '-', '*', '**', '/', ']', ')', '}', identif",
			"expecting: ',', '=', 'tantque', 'faire', 'si', 'alors', 'retour', ';', 'ecrire', '|', '&', '<', '+', '-', '*', '**', '/', '[', ']', '(', ')', '}', identif",
			"expecting: 'faire', '|'",
			"expecting: ',', 'tantque', 'faire', 'si', 'alors', 'retour', ';', 'ecrire', '|', '&', ']', ')', '}', identif",
			"expecting: ',', '=', 'tantque', 'faire', 'si', 'alors', 'retour', ';', 'ecrire', '|', '&', '<', ']', ')', '}', identif",
			"expecting: ',', '=', 'tantque', 'faire', 'si', 'alors', 'retour', ';', 'ecrire', '|', '&', '<', '+', '-', ']', ')', '}', identif",
			"expecting: ',', '=', 'tantque', 'faire', 'si', 'alors', 'retour', ';', 'ecrire', '|', '&', '<', '+', '-', '*', '/', ']', ')', '}', identif",
			"expecting: 'tantque'",
			"expecting: 'alors', '|'",
			"expecting: ';', '|'",
			"expecting: nombre, 'lire', 'vrai', 'faux', '!', '(', ')', identif",
			"expecting: 'entier', 'bool', 'tantque', 'faire', 'si', 'sinon', 'retour', 'ecrire', '}', identif, EOF",
			"expecting: '|', ')'",
			"expecting: '|', ']'",
			"expecting: ',', '|', ')'",
			"expecting: 'tantque', 'faire', 'si', 'retour', 'ecrire', '|', '}', identif",
			"expecting: 'tantque', 'faire', 'si', 'sinon', 'retour', 'ecrire', '}', identif",
			"expecting: ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 1, 3, 0, 5, 6, 0, 7, 1, 3, 8, 9, 1, 10, 3, 11, 5, 2, 12, 13, 0, 14, 15, 16, 17, 8, 9, 18, 19, 18, 18, 2, 20, 21, 12, 22, 19, 8, 10, 13, 0, 14, 23, 2, 23, 23, 18, 18, 24, 23, 25, 26, 27, 28, 29, 29, 29, 23, 30, 31, 32, 18, 18, 33, 34, 21, 18, 0, 13, 0, 19, 8, 14, 29, 35, 33, 19, 18, 18, 18, 18, 18, 18, 18, 18, 29, 18, 19, 12, 35, 36, 14, 37, 32, 19, 0, 13, 0, 23, 23, 14, 12, 26, 27, 28, 28, 29, 29, 29, 29, 38, 39, 40, 23, 40, 18, 14, 12, 0, 19, 23, 19, 12, 12, 37, 0, 12, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
