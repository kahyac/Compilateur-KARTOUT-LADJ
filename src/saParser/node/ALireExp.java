/* This file was generated by SableCC (http://www.sablecc.org/). */

package saParser.node;

import saParser.analysis.*;

@SuppressWarnings("nls")
public final class ALireExp extends PExp
{
    private TLire _lire_;

    public ALireExp()
    {
        // Constructor
    }

    public ALireExp(
        @SuppressWarnings("hiding") TLire _lire_)
    {
        // Constructor
        setLire(_lire_);

    }

    @Override
    public Object clone()
    {
        return new ALireExp(
            cloneNode(this._lire_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALireExp(this);
    }

    public TLire getLire()
    {
        return this._lire_;
    }

    public void setLire(TLire node)
    {
        if(this._lire_ != null)
        {
            this._lire_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lire_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lire_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lire_ == child)
        {
            this._lire_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lire_ == oldChild)
        {
            setLire((TLire) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
