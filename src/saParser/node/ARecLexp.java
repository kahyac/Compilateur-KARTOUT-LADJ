/* This file was generated by SableCC (http://www.sablecc.org/). */

package saParser.node;

import saParser.analysis.*;

@SuppressWarnings("nls")
public final class ARecLexp extends PLexp
{
    private TPo _po_;
    private TSalexp _salexp_;
    private PExp _exp_;
    private PLexp _lexp_;
    private TPf _pf_;

    public ARecLexp()
    {
        // Constructor
    }

    public ARecLexp(
        @SuppressWarnings("hiding") TPo _po_,
        @SuppressWarnings("hiding") TSalexp _salexp_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PLexp _lexp_,
        @SuppressWarnings("hiding") TPf _pf_)
    {
        // Constructor
        setPo(_po_);

        setSalexp(_salexp_);

        setExp(_exp_);

        setLexp(_lexp_);

        setPf(_pf_);

    }

    @Override
    public Object clone()
    {
        return new ARecLexp(
            cloneNode(this._po_),
            cloneNode(this._salexp_),
            cloneNode(this._exp_),
            cloneNode(this._lexp_),
            cloneNode(this._pf_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARecLexp(this);
    }

    public TPo getPo()
    {
        return this._po_;
    }

    public void setPo(TPo node)
    {
        if(this._po_ != null)
        {
            this._po_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._po_ = node;
    }

    public TSalexp getSalexp()
    {
        return this._salexp_;
    }

    public void setSalexp(TSalexp node)
    {
        if(this._salexp_ != null)
        {
            this._salexp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._salexp_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PLexp getLexp()
    {
        return this._lexp_;
    }

    public void setLexp(PLexp node)
    {
        if(this._lexp_ != null)
        {
            this._lexp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lexp_ = node;
    }

    public TPf getPf()
    {
        return this._pf_;
    }

    public void setPf(TPf node)
    {
        if(this._pf_ != null)
        {
            this._pf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._po_)
            + toString(this._salexp_)
            + toString(this._exp_)
            + toString(this._lexp_)
            + toString(this._pf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._po_ == child)
        {
            this._po_ = null;
            return;
        }

        if(this._salexp_ == child)
        {
            this._salexp_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._lexp_ == child)
        {
            this._lexp_ = null;
            return;
        }

        if(this._pf_ == child)
        {
            this._pf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._po_ == oldChild)
        {
            setPo((TPo) newChild);
            return;
        }

        if(this._salexp_ == oldChild)
        {
            setSalexp((TSalexp) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._lexp_ == oldChild)
        {
            setLexp((PLexp) newChild);
            return;
        }

        if(this._pf_ == oldChild)
        {
            setPf((TPf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
