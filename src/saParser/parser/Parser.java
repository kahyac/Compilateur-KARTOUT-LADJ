/* This file was generated by SableCC (http://www.sablecc.org/). */

package saParser.parser;

import saParser.lexer.*;
import saParser.node.*;
import saParser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProg */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAddExp */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAndExp */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ADivExp */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AEqualExp */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AInfExp */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AMultExp */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AOrExp */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce ASubExp */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce ANotExp */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AAppelExp */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AVarExp */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list, false);
            }
            break;
            case 12: /* reduce AFauxExp */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list, false);
            }
            break;
            case 13: /* reduce AVraiExp */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list, false);
            }
            break;
            case 14: /* reduce AIntExp */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list, false);
            }
            break;
            case 15: /* reduce ALireExp */
            {
                ArrayList<Object> list = new15();
                push(goTo(1), list, false);
            }
            break;
            case 16: /* reduce AAffectInst */
            {
                ArrayList<Object> list = new16();
                push(goTo(2), list, false);
            }
            break;
            case 17: /* reduce ABlocInst */
            {
                ArrayList<Object> list = new17();
                push(goTo(2), list, false);
            }
            break;
            case 18: /* reduce AEcritureInst */
            {
                ArrayList<Object> list = new18();
                push(goTo(2), list, false);
            }
            break;
            case 19: /* reduce ARetourInst */
            {
                ArrayList<Object> list = new19();
                push(goTo(2), list, false);
            }
            break;
            case 20: /* reduce ASiInst */
            {
                ArrayList<Object> list = new20();
                push(goTo(2), list, false);
            }
            break;
            case 21: /* reduce ASi2Inst */
            {
                ArrayList<Object> list = new21();
                push(goTo(2), list, false);
            }
            break;
            case 22: /* reduce ATantqueInst */
            {
                ArrayList<Object> list = new22();
                push(goTo(2), list, false);
            }
            break;
            case 23: /* reduce AAppelInst */
            {
                ArrayList<Object> list = new23();
                push(goTo(2), list, false);
            }
            break;
            case 24: /* reduce ARecLdecfonc */
            {
                ArrayList<Object> list = new24();
                push(goTo(3), list, false);
            }
            break;
            case 25: /* reduce AFinLdecfonc */
            {
                ArrayList<Object> list = new25();
                push(goTo(3), list, false);
            }
            break;
            case 26: /* reduce ARecLdecvar */
            {
                ArrayList<Object> list = new26();
                push(goTo(4), list, false);
            }
            break;
            case 27: /* reduce AFinLdecvar */
            {
                ArrayList<Object> list = new27();
                push(goTo(4), list, false);
            }
            break;
            case 28: /* reduce ARecLexp */
            {
                ArrayList<Object> list = new28();
                push(goTo(5), list, false);
            }
            break;
            case 29: /* reduce AFinLexp */
            {
                ArrayList<Object> list = new29();
                push(goTo(5), list, false);
            }
            break;
            case 30: /* reduce ARecLinst */
            {
                ArrayList<Object> list = new30();
                push(goTo(6), list, false);
            }
            break;
            case 31: /* reduce AFinLinst */
            {
                ArrayList<Object> list = new31();
                push(goTo(6), list, false);
            }
            break;
            case 32: /* reduce ADecfonc */
            {
                ArrayList<Object> list = new32();
                push(goTo(7), list, false);
            }
            break;
            case 33: /* reduce ATabDecvar */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, false);
            }
            break;
            case 34: /* reduce ASimpleDecvar */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AIndiceeVar */
            {
                ArrayList<Object> list = new35();
                push(goTo(9), list, false);
            }
            break;
            case 36: /* reduce ASimpleVar */
            {
                ArrayList<Object> list = new36();
                push(goTo(9), list, false);
            }
            break;
            case 37: /* reduce AAppel */
            {
                ArrayList<Object> list = new37();
                push(goTo(10), list, false);
            }
            break;
            case 38: /* reduce AEntierType */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list, false);
            }
            break;
            case 39: /* reduce ABoolType */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list, false);
            }
            break;
            case 40: /* reduce ANullType */
            {
                ArrayList<Object> list = new40();
                push(goTo(11), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        TPo tpoNode2;
        TSaprog tsaprogNode3;
        PLdecvar pldecvarNode4;
        PLdecfonc pldecfoncNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaprogNode3 = (TSaprog)nodeArrayList2.get(0);
        pldecvarNode4 = (PLdecvar)nodeArrayList3.get(0);
        pldecfoncNode5 = (PLdecfonc)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pprogNode1 = new AProg(tpoNode2, tsaprogNode3, pldecvarNode4, pldecfoncNode5, tpfNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpadd tsaexpaddNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpaddNode3 = (TSaexpadd)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new AAddExp(tpoNode2, tsaexpaddNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpand tsaexpandNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpandNode3 = (TSaexpand)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new AAndExp(tpoNode2, tsaexpandNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADivExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpdiv tsaexpdivNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpdivNode3 = (TSaexpdiv)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new ADivExp(tpoNode2, tsaexpdivNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpequal tsaexpequalNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpequalNode3 = (TSaexpequal)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new AEqualExp(tpoNode2, tsaexpequalNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AInfExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpinf tsaexpinfNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpinfNode3 = (TSaexpinf)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new AInfExp(tpoNode2, tsaexpinfNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpmult tsaexpmultNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpmultNode3 = (TSaexpmult)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new AMultExp(tpoNode2, tsaexpmultNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpor tsaexporNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexporNode3 = (TSaexpor)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new AOrExp(tpoNode2, tsaexporNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASubExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpsub tsaexpsubNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpsubNode3 = (TSaexpsub)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pexpNode1 = new ASubExp(tpoNode2, tsaexpsubNode3, pexpNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ANotExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpnot tsaexpnotNode3;
        PExp pexpNode4;
        TPf tpfNode5;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpnotNode3 = (TSaexpnot)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pexpNode1 = new ANotExp(tpoNode2, tsaexpnotNode3, pexpNode4, tpfNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAppelExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpappel tsaexpappelNode3;
        PAppel pappelNode4;
        TPf tpfNode5;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpappelNode3 = (TSaexpappel)nodeArrayList2.get(0);
        pappelNode4 = (PAppel)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pexpNode1 = new AAppelExp(tpoNode2, tsaexpappelNode3, pappelNode4, tpfNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVarExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSaexpvar tsaexpvarNode3;
        PVar pvarNode4;
        TPf tpfNode5;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaexpvarNode3 = (TSaexpvar)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pexpNode1 = new AVarExp(tpoNode2, tsaexpvarNode3, pvarNode4, tpfNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AFauxExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pexpNode1 = new AFauxExp(tfauxNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVraiExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pexpNode1 = new AVraiExp(tvraiNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIntExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pexpNode1 = new AIntExp(tintegerNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ALireExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TLire tlireNode2;
        tlireNode2 = (TLire)nodeArrayList1.get(0);

        pexpNode1 = new ALireExp(tlireNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAffectInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSainstaffect tsainstaffectNode3;
        PVar pvarNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsainstaffectNode3 = (TSainstaffect)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pinstNode1 = new AAffectInst(tpoNode2, tsainstaffectNode3, pvarNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ABlocInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSainstbloc tsainstblocNode3;
        PLinst plinstNode4;
        TPf tpfNode5;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsainstblocNode3 = (TSainstbloc)nodeArrayList2.get(0);
        plinstNode4 = (PLinst)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pinstNode1 = new ABlocInst(tpoNode2, tsainstblocNode3, plinstNode4, tpfNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AEcritureInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSainstecriture tsainstecritureNode3;
        PExp pexpNode4;
        TPf tpfNode5;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsainstecritureNode3 = (TSainstecriture)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pinstNode1 = new AEcritureInst(tpoNode2, tsainstecritureNode3, pexpNode4, tpfNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ARetourInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSainstretour tsainstretourNode3;
        PExp pexpNode4;
        TPf tpfNode5;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsainstretourNode3 = (TSainstretour)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pinstNode1 = new ARetourInst(tpoNode2, tsainstretourNode3, pexpNode4, tpfNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASiInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSainstsi tsainstsiNode3;
        PExp pexpNode4;
        PInst pinstNode5;
        PInst pinstNode6;
        TPf tpfNode7;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsainstsiNode3 = (TSainstsi)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pinstNode5 = (PInst)nodeArrayList4.get(0);
        pinstNode6 = (PInst)nodeArrayList5.get(0);
        tpfNode7 = (TPf)nodeArrayList6.get(0);

        pinstNode1 = new ASiInst(tpoNode2, tsainstsiNode3, pexpNode4, pinstNode5, pinstNode6, tpfNode7);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASi2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSainstsi tsainstsiNode3;
        PExp pexpNode4;
        PInst pinstNode5;
        TNull tnullNode6;
        TPf tpfNode7;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsainstsiNode3 = (TSainstsi)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pinstNode5 = (PInst)nodeArrayList4.get(0);
        tnullNode6 = (TNull)nodeArrayList5.get(0);
        tpfNode7 = (TPf)nodeArrayList6.get(0);

        pinstNode1 = new ASi2Inst(tpoNode2, tsainstsiNode3, pexpNode4, pinstNode5, tnullNode6, tpfNode7);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ATantqueInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSainsttantque tsainsttantqueNode3;
        PExp pexpNode4;
        PInst pinstNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsainsttantqueNode3 = (TSainsttantque)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        pinstNode5 = (PInst)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pinstNode1 = new ATantqueInst(tpoNode2, tsainsttantqueNode3, pexpNode4, pinstNode5, tpfNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAppelInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PAppel pappelNode2;
        pappelNode2 = (PAppel)nodeArrayList1.get(0);

        pinstNode1 = new AAppelInst(pappelNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ARecLdecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdecfonc pldecfoncNode1;
        {
            // Block
        TPo tpoNode2;
        TSaldecfonc tsaldecfoncNode3;
        PDecfonc pdecfoncNode4;
        PLdecfonc pldecfoncNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaldecfoncNode3 = (TSaldecfonc)nodeArrayList2.get(0);
        pdecfoncNode4 = (PDecfonc)nodeArrayList3.get(0);
        pldecfoncNode5 = (PLdecfonc)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pldecfoncNode1 = new ARecLdecfonc(tpoNode2, tsaldecfoncNode3, pdecfoncNode4, pldecfoncNode5, tpfNode6);
        }
	nodeList.add(pldecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFinLdecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdecfonc pldecfoncNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pldecfoncNode1 = new AFinLdecfonc(tnullNode2);
        }
	nodeList.add(pldecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARecLdecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdecvar pldecvarNode1;
        {
            // Block
        TPo tpoNode2;
        TSaldecvar tsaldecvarNode3;
        PDecvar pdecvarNode4;
        PLdecvar pldecvarNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaldecvarNode3 = (TSaldecvar)nodeArrayList2.get(0);
        pdecvarNode4 = (PDecvar)nodeArrayList3.get(0);
        pldecvarNode5 = (PLdecvar)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pldecvarNode1 = new ARecLdecvar(tpoNode2, tsaldecvarNode3, pdecvarNode4, pldecvarNode5, tpfNode6);
        }
	nodeList.add(pldecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFinLdecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdecvar pldecvarNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        pldecvarNode1 = new AFinLdecvar(tnullNode2);
        }
	nodeList.add(pldecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ARecLexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp plexpNode1;
        {
            // Block
        TPo tpoNode2;
        TSalexp tsalexpNode3;
        PExp pexpNode4;
        PLexp plexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsalexpNode3 = (TSalexp)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        plexpNode5 = (PLexp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        plexpNode1 = new ARecLexp(tpoNode2, tsalexpNode3, pexpNode4, plexpNode5, tpfNode6);
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AFinLexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp plexpNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        plexpNode1 = new AFinLexp(tnullNode2);
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ARecLinst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLinst plinstNode1;
        {
            // Block
        TPo tpoNode2;
        TSalinst tsalinstNode3;
        PInst pinstNode4;
        PLinst plinstNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsalinstNode3 = (TSalinst)nodeArrayList2.get(0);
        pinstNode4 = (PInst)nodeArrayList3.get(0);
        plinstNode5 = (PLinst)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        plinstNode1 = new ARecLinst(tpoNode2, tsalinstNode3, pinstNode4, plinstNode5, tpfNode6);
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AFinLinst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLinst plinstNode1;
        {
            // Block
        TNull tnullNode2;
        tnullNode2 = (TNull)nodeArrayList1.get(0);

        plinstNode1 = new AFinLinst(tnullNode2);
        }
	nodeList.add(plinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ADecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecfonc pdecfoncNode1;
        {
            // Block
        TPo tpoNode2;
        TSadecfonc tsadecfoncNode3;
        TId tidNode4;
        PType ptypeNode5;
        PLdecvar pldecvarNode6;
        PLdecvar pldecvarNode7;
        PInst pinstNode8;
        TPf tpfNode9;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsadecfoncNode3 = (TSadecfonc)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        pldecvarNode6 = (PLdecvar)nodeArrayList5.get(0);
        pldecvarNode7 = (PLdecvar)nodeArrayList6.get(0);
        pinstNode8 = (PInst)nodeArrayList7.get(0);
        tpfNode9 = (TPf)nodeArrayList8.get(0);

        pdecfoncNode1 = new ADecfonc(tpoNode2, tsadecfoncNode3, tidNode4, ptypeNode5, pldecvarNode6, pldecvarNode7, pinstNode8, tpfNode9);
        }
	nodeList.add(pdecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATabDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        TPo tpoNode2;
        TSadectab tsadectabNode3;
        TId tidNode4;
        PType ptypeNode5;
        TInteger tintegerNode6;
        TPf tpfNode7;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsadectabNode3 = (TSadectab)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tintegerNode6 = (TInteger)nodeArrayList5.get(0);
        tpfNode7 = (TPf)nodeArrayList6.get(0);

        pdecvarNode1 = new ATabDecvar(tpoNode2, tsadectabNode3, tidNode4, ptypeNode5, tintegerNode6, tpfNode7);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASimpleDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        TPo tpoNode2;
        TSadecvarsimple tsadecvarsimpleNode3;
        TId tidNode4;
        PType ptypeNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsadecvarsimpleNode3 = (TSadecvarsimple)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pdecvarNode1 = new ASimpleDecvar(tpoNode2, tsadecvarsimpleNode3, tidNode4, ptypeNode5, tpfNode6);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIndiceeVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TPo tpoNode2;
        TSavarindicee tsavarindiceeNode3;
        TId tidNode4;
        PExp pexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsavarindiceeNode3 = (TSavarindicee)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pvarNode1 = new AIndiceeVar(tpoNode2, tsavarindiceeNode3, tidNode4, pexpNode5, tpfNode6);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASimpleVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TPo tpoNode2;
        TSavarsimple tsavarsimpleNode3;
        TId tidNode4;
        TPf tpfNode5;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsavarsimpleNode3 = (TSavarsimple)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pvarNode1 = new ASimpleVar(tpoNode2, tsavarsimpleNode3, tidNode4, tpfNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAppel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppel pappelNode1;
        {
            // Block
        TPo tpoNode2;
        TSaappel tsaappelNode3;
        TId tidNode4;
        PLexp plexpNode5;
        TPf tpfNode6;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        tsaappelNode3 = (TSaappel)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        plexpNode5 = (PLexp)nodeArrayList4.get(0);
        tpfNode6 = (TPf)nodeArrayList5.get(0);

        pappelNode1 = new AAppel(tpoNode2, tsaappelNode3, tidNode4, plexpNode5, tpfNode6);
        }
	nodeList.add(pappelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ANullType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TNul tnulNode2;
        tnulNode2 = (TNul)nodeArrayList1.get(0);

        ptypeNode1 = new ANullType(tnulNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {32, SHIFT, 3}, },
			{{-1, ERROR, 2}, {44, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {0, SHIFT, 4}, {38, SHIFT, 5}, },
			{{-1, ERROR, 4}, {29, SHIFT, 7}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 6}, {0, SHIFT, 8}, {38, SHIFT, 9}, },
			{{-1, ERROR, 7}, {0, SHIFT, 11}, },
			{{-1, ERROR, 8}, {28, SHIFT, 13}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 10}, {1, SHIFT, 14}, },
			{{-1, ERROR, 11}, {4, SHIFT, 15}, {6, SHIFT, 16}, },
			{{-1, ERROR, 12}, {0, SHIFT, 4}, {38, SHIFT, 5}, },
			{{-1, ERROR, 13}, {0, SHIFT, 18}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 15}, {43, SHIFT, 20}, },
			{{-1, ERROR, 16}, {43, SHIFT, 21}, },
			{{-1, ERROR, 17}, {1, SHIFT, 22}, },
			{{-1, ERROR, 18}, {3, SHIFT, 23}, },
			{{-1, ERROR, 19}, {0, SHIFT, 8}, {38, SHIFT, 9}, },
			{{-1, ERROR, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 21}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 23}, {43, SHIFT, 30}, },
			{{-1, ERROR, 24}, {1, SHIFT, 31}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 28}, {42, SHIFT, 32}, },
			{{-1, ERROR, 29}, {1, SHIFT, 33}, },
			{{-1, ERROR, 30}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 32}, {1, SHIFT, 35}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 34}, {0, SHIFT, 4}, {38, SHIFT, 5}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 36}, {0, SHIFT, 4}, {38, SHIFT, 5}, },
			{{-1, ERROR, 37}, {0, SHIFT, 38}, },
			{{-1, ERROR, 38}, {2, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 44}, {25, SHIFT, 45}, {26, SHIFT, 46}, {27, SHIFT, 47}, },
			{{-1, ERROR, 39}, {1, SHIFT, 48}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 41}, {43, SHIFT, 49}, },
			{{-1, ERROR, 42}, {0, SHIFT, 50}, },
			{{-1, ERROR, 43}, {0, SHIFT, 52}, {38, SHIFT, 53}, },
			{{-1, ERROR, 44}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 45}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 46}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 47}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 49}, {0, SHIFT, 64}, {38, SHIFT, 65}, },
			{{-1, ERROR, 50}, {33, SHIFT, 67}, {34, SHIFT, 68}, },
			{{-1, ERROR, 51}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 52}, {31, SHIFT, 70}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 54}, {1, SHIFT, 71}, },
			{{-1, ERROR, 55}, {7, SHIFT, 72}, {8, SHIFT, 73}, {9, SHIFT, 74}, {10, SHIFT, 75}, {11, SHIFT, 76}, {13, SHIFT, 77}, {16, SHIFT, 78}, {17, SHIFT, 79}, {18, SHIFT, 80}, {19, SHIFT, 81}, {20, SHIFT, 82}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 60}, {1, SHIFT, 83}, },
			{{-1, ERROR, 61}, {1, SHIFT, 84}, },
			{{-1, ERROR, 62}, {0, SHIFT, 38}, },
			{{-1, ERROR, 63}, {0, SHIFT, 38}, },
			{{-1, ERROR, 64}, {30, SHIFT, 87}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 66}, {1, SHIFT, 88}, },
			{{-1, ERROR, 67}, {43, SHIFT, 89}, },
			{{-1, ERROR, 68}, {43, SHIFT, 90}, },
			{{-1, ERROR, 69}, {1, SHIFT, 91}, },
			{{-1, ERROR, 70}, {0, SHIFT, 38}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 72}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 73}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 74}, {0, SHIFT, 95}, },
			{{-1, ERROR, 75}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 76}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 77}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 78}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 79}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 80}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 81}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 82}, {0, SHIFT, 50}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 85}, {0, SHIFT, 38}, {38, SHIFT, 105}, },
			{{-1, ERROR, 86}, {1, SHIFT, 107}, },
			{{-1, ERROR, 87}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 89}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 90}, {1, SHIFT, 110}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 92}, {0, SHIFT, 52}, {38, SHIFT, 53}, },
			{{-1, ERROR, 93}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 94}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 95}, {2, SHIFT, 41}, },
			{{-1, ERROR, 96}, {1, SHIFT, 114}, },
			{{-1, ERROR, 97}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 98}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 99}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 100}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 101}, {1, SHIFT, 119}, },
			{{-1, ERROR, 102}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 103}, {0, SHIFT, 55}, {35, SHIFT, 56}, {36, SHIFT, 57}, {37, SHIFT, 58}, {42, SHIFT, 59}, },
			{{-1, ERROR, 104}, {1, SHIFT, 122}, },
			{{-1, ERROR, 105}, {1, SHIFT, 123}, },
			{{-1, ERROR, 106}, {1, SHIFT, 124}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 108}, {0, SHIFT, 64}, {38, SHIFT, 65}, },
			{{-1, ERROR, 109}, {1, SHIFT, 126}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 111}, {1, SHIFT, 127}, },
			{{-1, ERROR, 112}, {1, SHIFT, 128}, },
			{{-1, ERROR, 113}, {1, SHIFT, 129}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 115}, {1, SHIFT, 130}, },
			{{-1, ERROR, 116}, {1, SHIFT, 131}, },
			{{-1, ERROR, 117}, {1, SHIFT, 132}, },
			{{-1, ERROR, 118}, {1, SHIFT, 133}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 120}, {1, SHIFT, 134}, },
			{{-1, ERROR, 121}, {1, SHIFT, 135}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 125}, {1, SHIFT, 136}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 28}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 60}, {45, 61}, {46, 62}, {47, 63}, {51, 69}, {72, 93}, {73, 94}, {75, 97}, {76, 98}, {77, 99}, {78, 100}, {79, 101}, {80, 102}, {81, 103}, {87, 108}, {89, 109}, {93, 112}, {94, 113}, {97, 115}, {98, 116}, {99, 117}, {100, 118}, {102, 120}, {103, 121}, },
			{{-1, 39}, {62, 85}, {63, 86}, {70, 92}, {85, 106}, },
			{{-1, 10}, {19, 24}, },
			{{-1, 6}, {12, 17}, {34, 36}, {36, 37}, },
			{{-1, 66}, {108, 125}, },
			{{-1, 54}, {92, 111}, },
			{{-1, 19}, },
			{{-1, 12}, },
			{{-1, 51}, {82, 104}, },
			{{-1, 40}, {74, 96}, },
			{{-1, 28}, {21, 29}, {30, 34}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '('",
			"expecting: 'SaProg'",
			"expecting: EOF",
			"expecting: '(', 'null'",
			"expecting: 'SaLDecVar'",
			"expecting: '(', ')', 'null'",
			"expecting: 'SaLDecFonc'",
			"expecting: ')'",
			"expecting: 'SaDecTab', 'SaDecVarSimple'",
			"expecting: id",
			"expecting: 'SaDecFonc'",
			"expecting: 'entier', 'bool', 'nul'",
			"expecting: '(', ')', 'null', integer",
			"expecting: integer",
			"expecting: 'SaAppel', 'SaInstAffect', 'SaInstBloc', 'SaInstEcriture', 'SaInstRetour', 'SaInstSi', 'SaInstTantQue'",
			"expecting: '(', 'faux', 'vrai', 'lire', integer",
			"expecting: 'SaVarIndicee', 'SaVarSimple'",
			"expecting: 'SaLInst'",
			"expecting: 'SaExpAdd', 'SaExpAnd', 'SaExpAppel', 'SaExpDiv', 'SaExpEqual', 'SaExpInf', 'SaExpMult', 'SaExpNot', 'SaExpOr', 'SaExpSub', 'SaExpVar'",
			"expecting: '(', ')', 'faux', 'vrai', 'lire', 'null', integer",
			"expecting: 'SaLExp'",
			"expecting: 'SaAppel'",
			"expecting: '(', ')', 'faux', 'vrai', 'lire', integer",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 3, 0, 6, 7, 7, 8, 3, 0, 2, 9, 9, 7, 10, 3, 11, 11, 5, 9, 7, 12, 12, 12, 13, 7, 11, 7, 7, 3, 3, 3, 3, 0, 14, 7, 5, 9, 0, 3, 15, 15, 15, 15, 3, 3, 16, 15, 17, 7, 7, 18, 19, 19, 19, 19, 7, 7, 0, 0, 20, 7, 7, 9, 9, 7, 0, 5, 15, 15, 0, 15, 15, 15, 15, 15, 15, 15, 0, 5, 5, 3, 7, 15, 5, 15, 7, 5, 3, 15, 15, 21, 7, 15, 15, 15, 15, 7, 15, 15, 7, 7, 7, 5, 3, 7, 22, 7, 7, 7, 19, 7, 7, 7, 7, 19, 7, 7, 19, 5, 5, 7, 22, 7, 19, 19, 19, 19, 19, 19, 19, 19, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
