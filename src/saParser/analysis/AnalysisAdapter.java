/* This file was generated by SableCC (http://www.sablecc.org/). */

package saParser.analysis;

import java.util.*;
import saParser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfExp(AInfExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelExp(AAppelExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFauxExp(AFauxExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVraiExp(AVraiExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireExp(ALireExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectInst(AAffectInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocInst(ABlocInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEcritureInst(AEcritureInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetourInst(ARetourInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASiInst(ASiInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASi2Inst(ASi2Inst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATantqueInst(ATantqueInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelInst(AAppelInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARecLdecfonc(ARecLdecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinLdecfonc(AFinLdecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARecLdecvar(ARecLdecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinLdecvar(AFinLdecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARecLexp(ARecLexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinLexp(AFinLexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARecLinst(ARecLinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFinLinst(AFinLinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfonc(ADecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATabDecvar(ATabDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleDecvar(ASimpleDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndiceeVar(AIndiceeVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleVar(ASimpleVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppel(AAppel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullType(ANullType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPo(TPo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPf(TPf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaappel(TSaappel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSadecfonc(TSadecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSadectab(TSadectab node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSadecvar(TSadecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSadecvarsimple(TSadecvarsimple node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpadd(TSaexpadd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpand(TSaexpand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpappel(TSaexpappel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpdiv(TSaexpdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpequal(TSaexpequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpfaux(TSaexpfaux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpinf(TSaexpinf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpint(TSaexpint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexplire(TSaexplire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpmult(TSaexpmult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpnot(TSaexpnot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpor(TSaexpor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpsub(TSaexpsub node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpvar(TSaexpvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaexpvrai(TSaexpvrai node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSainstaffect(TSainstaffect node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSainstbloc(TSainstbloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSainstecriture(TSainstecriture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSainstretour(TSainstretour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSainstsi(TSainstsi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSainsttantque(TSainsttantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaldecfonc(TSaldecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaldecvar(TSaldecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSalexp(TSalexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSalinst(TSalinst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSaprog(TSaprog node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSavarindicee(TSavarindicee node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSavarsimple(TSavarsimple node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaux(TFaux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVrai(TVrai node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNul(TNul node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
