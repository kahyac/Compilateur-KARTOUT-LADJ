/* This file was generated by SableCC (http://www.sablecc.org/). */

package saParser.analysis;

import java.util.*;
import saParser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaprog() != null)
        {
            node.getSaprog().apply(this);
        }
        if(node.getLdecvar() != null)
        {
            node.getLdecvar().apply(this);
        }
        if(node.getLdecfonc() != null)
        {
            node.getLdecfonc().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAProg(node);
    }

    public void inAAddExp(AAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddExp(AAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        inAAddExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpadd() != null)
        {
            node.getSaexpadd().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAAddExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpand() != null)
        {
            node.getSaexpand().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAAndExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpdiv() != null)
        {
            node.getSaexpdiv().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outADivExp(node);
    }

    public void inAEqualExp(AEqualExp node)
    {
        defaultIn(node);
    }

    public void outAEqualExp(AEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        inAEqualExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpequal() != null)
        {
            node.getSaexpequal().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAEqualExp(node);
    }

    public void inAInfExp(AInfExp node)
    {
        defaultIn(node);
    }

    public void outAInfExp(AInfExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfExp(AInfExp node)
    {
        inAInfExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpinf() != null)
        {
            node.getSaexpinf().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAInfExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpmult() != null)
        {
            node.getSaexpmult().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAMultExp(node);
    }

    public void inAModuloExp(AModuloExp node)
    {
        defaultIn(node);
    }

    public void outAModuloExp(AModuloExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloExp(AModuloExp node)
    {
        inAModuloExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpmodulo() != null)
        {
            node.getSaexpmodulo().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAModuloExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpor() != null)
        {
            node.getSaexpor().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAOrExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpsub() != null)
        {
            node.getSaexpsub().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outASubExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpnot() != null)
        {
            node.getSaexpnot().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outANotExp(node);
    }

    public void inAAppelExp(AAppelExp node)
    {
        defaultIn(node);
    }

    public void outAAppelExp(AAppelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelExp(AAppelExp node)
    {
        inAAppelExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpappel() != null)
        {
            node.getSaexpappel().apply(this);
        }
        if(node.getAppel() != null)
        {
            node.getAppel().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAAppelExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaexpvar() != null)
        {
            node.getSaexpvar().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAVarExp(node);
    }

    public void inAFauxExp(AFauxExp node)
    {
        defaultIn(node);
    }

    public void outAFauxExp(AFauxExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFauxExp(AFauxExp node)
    {
        inAFauxExp(node);
        if(node.getFaux() != null)
        {
            node.getFaux().apply(this);
        }
        outAFauxExp(node);
    }

    public void inAVraiExp(AVraiExp node)
    {
        defaultIn(node);
    }

    public void outAVraiExp(AVraiExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVraiExp(AVraiExp node)
    {
        inAVraiExp(node);
        if(node.getVrai() != null)
        {
            node.getVrai().apply(this);
        }
        outAVraiExp(node);
    }

    public void inAIntExp(AIntExp node)
    {
        defaultIn(node);
    }

    public void outAIntExp(AIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        inAIntExp(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntExp(node);
    }

    public void inALireExp(ALireExp node)
    {
        defaultIn(node);
    }

    public void outALireExp(ALireExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireExp(ALireExp node)
    {
        inALireExp(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        outALireExp(node);
    }

    public void inAAffectInst(AAffectInst node)
    {
        defaultIn(node);
    }

    public void outAAffectInst(AAffectInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectInst(AAffectInst node)
    {
        inAAffectInst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSainstaffect() != null)
        {
            node.getSainstaffect().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAAffectInst(node);
    }

    public void inAIncrInst(AIncrInst node)
    {
        defaultIn(node);
    }

    public void outAIncrInst(AIncrInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrInst(AIncrInst node)
    {
        inAIncrInst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaincr() != null)
        {
            node.getSaincr().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAIncrInst(node);
    }

    public void inABlocInst(ABlocInst node)
    {
        defaultIn(node);
    }

    public void outABlocInst(ABlocInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocInst(ABlocInst node)
    {
        inABlocInst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSainstbloc() != null)
        {
            node.getSainstbloc().apply(this);
        }
        if(node.getLinst() != null)
        {
            node.getLinst().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outABlocInst(node);
    }

    public void inAEcritureInst(AEcritureInst node)
    {
        defaultIn(node);
    }

    public void outAEcritureInst(AEcritureInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcritureInst(AEcritureInst node)
    {
        inAEcritureInst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSainstecriture() != null)
        {
            node.getSainstecriture().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAEcritureInst(node);
    }

    public void inARetourInst(ARetourInst node)
    {
        defaultIn(node);
    }

    public void outARetourInst(ARetourInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetourInst(ARetourInst node)
    {
        inARetourInst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSainstretour() != null)
        {
            node.getSainstretour().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outARetourInst(node);
    }

    public void inASiInst(ASiInst node)
    {
        defaultIn(node);
    }

    public void outASiInst(ASiInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiInst(ASiInst node)
    {
        inASiInst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSainstsi() != null)
        {
            node.getSainstsi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outASiInst(node);
    }

    public void inASi2Inst(ASi2Inst node)
    {
        defaultIn(node);
    }

    public void outASi2Inst(ASi2Inst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASi2Inst(ASi2Inst node)
    {
        inASi2Inst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSainstsi() != null)
        {
            node.getSainstsi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outASi2Inst(node);
    }

    public void inATantqueInst(ATantqueInst node)
    {
        defaultIn(node);
    }

    public void outATantqueInst(ATantqueInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantqueInst(ATantqueInst node)
    {
        inATantqueInst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSainsttantque() != null)
        {
            node.getSainsttantque().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outATantqueInst(node);
    }

    public void inAAppelInst(AAppelInst node)
    {
        defaultIn(node);
    }

    public void outAAppelInst(AAppelInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelInst(AAppelInst node)
    {
        inAAppelInst(node);
        if(node.getAppel() != null)
        {
            node.getAppel().apply(this);
        }
        outAAppelInst(node);
    }

    public void inARecLdecfonc(ARecLdecfonc node)
    {
        defaultIn(node);
    }

    public void outARecLdecfonc(ARecLdecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLdecfonc(ARecLdecfonc node)
    {
        inARecLdecfonc(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaldecfonc() != null)
        {
            node.getSaldecfonc().apply(this);
        }
        if(node.getDecfonc() != null)
        {
            node.getDecfonc().apply(this);
        }
        if(node.getLdecfonc() != null)
        {
            node.getLdecfonc().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outARecLdecfonc(node);
    }

    public void inAFinLdecfonc(AFinLdecfonc node)
    {
        defaultIn(node);
    }

    public void outAFinLdecfonc(AFinLdecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinLdecfonc(AFinLdecfonc node)
    {
        inAFinLdecfonc(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outAFinLdecfonc(node);
    }

    public void inARecLdecvar(ARecLdecvar node)
    {
        defaultIn(node);
    }

    public void outARecLdecvar(ARecLdecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLdecvar(ARecLdecvar node)
    {
        inARecLdecvar(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaldecvar() != null)
        {
            node.getSaldecvar().apply(this);
        }
        if(node.getDecvar() != null)
        {
            node.getDecvar().apply(this);
        }
        if(node.getLdecvar() != null)
        {
            node.getLdecvar().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outARecLdecvar(node);
    }

    public void inAFinLdecvar(AFinLdecvar node)
    {
        defaultIn(node);
    }

    public void outAFinLdecvar(AFinLdecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinLdecvar(AFinLdecvar node)
    {
        inAFinLdecvar(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outAFinLdecvar(node);
    }

    public void inARecLexp(ARecLexp node)
    {
        defaultIn(node);
    }

    public void outARecLexp(ARecLexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLexp(ARecLexp node)
    {
        inARecLexp(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSalexp() != null)
        {
            node.getSalexp().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLexp() != null)
        {
            node.getLexp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outARecLexp(node);
    }

    public void inAFinLexp(AFinLexp node)
    {
        defaultIn(node);
    }

    public void outAFinLexp(AFinLexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinLexp(AFinLexp node)
    {
        inAFinLexp(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outAFinLexp(node);
    }

    public void inARecLinst(ARecLinst node)
    {
        defaultIn(node);
    }

    public void outARecLinst(ARecLinst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecLinst(ARecLinst node)
    {
        inARecLinst(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSalinst() != null)
        {
            node.getSalinst().apply(this);
        }
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        if(node.getLinst() != null)
        {
            node.getLinst().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outARecLinst(node);
    }

    public void inAFinLinst(AFinLinst node)
    {
        defaultIn(node);
    }

    public void outAFinLinst(AFinLinst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinLinst(AFinLinst node)
    {
        inAFinLinst(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outAFinLinst(node);
    }

    public void inADecfonc(ADecfonc node)
    {
        defaultIn(node);
    }

    public void outADecfonc(ADecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecfonc(ADecfonc node)
    {
        inADecfonc(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSadecfonc() != null)
        {
            node.getSadecfonc().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getVariables() != null)
        {
            node.getVariables().apply(this);
        }
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outADecfonc(node);
    }

    public void inATabDecvar(ATabDecvar node)
    {
        defaultIn(node);
    }

    public void outATabDecvar(ATabDecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabDecvar(ATabDecvar node)
    {
        inATabDecvar(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSadectab() != null)
        {
            node.getSadectab().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outATabDecvar(node);
    }

    public void inASimpleDecvar(ASimpleDecvar node)
    {
        defaultIn(node);
    }

    public void outASimpleDecvar(ASimpleDecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleDecvar(ASimpleDecvar node)
    {
        inASimpleDecvar(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSadecvarsimple() != null)
        {
            node.getSadecvarsimple().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outASimpleDecvar(node);
    }

    public void inAIndiceeVar(AIndiceeVar node)
    {
        defaultIn(node);
    }

    public void outAIndiceeVar(AIndiceeVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndiceeVar(AIndiceeVar node)
    {
        inAIndiceeVar(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSavarindicee() != null)
        {
            node.getSavarindicee().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAIndiceeVar(node);
    }

    public void inASimpleVar(ASimpleVar node)
    {
        defaultIn(node);
    }

    public void outASimpleVar(ASimpleVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVar(ASimpleVar node)
    {
        inASimpleVar(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSavarsimple() != null)
        {
            node.getSavarsimple().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outASimpleVar(node);
    }

    public void inAAppel(AAppel node)
    {
        defaultIn(node);
    }

    public void outAAppel(AAppel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppel(AAppel node)
    {
        inAAppel(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getSaappel() != null)
        {
            node.getSaappel().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLexp() != null)
        {
            node.getLexp().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAAppel(node);
    }

    public void inAEntierType(AEntierType node)
    {
        defaultIn(node);
    }

    public void outAEntierType(AEntierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        inAEntierType(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inANullType(ANullType node)
    {
        defaultIn(node);
    }

    public void outANullType(ANullType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullType(ANullType node)
    {
        inANullType(node);
        if(node.getNul() != null)
        {
            node.getNul().apply(this);
        }
        outANullType(node);
    }
}
