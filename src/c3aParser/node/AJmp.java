/* This file was generated by SableCC (http://www.sablecc.org/). */

package c3aParser.node;

import c3aParser.analysis.*;

@SuppressWarnings("nls")
public final class AJmp extends PJmp
{
    private PEtiqop _etiqop_;
    private TGoto _goto_;
    private PConstante _result_;

    public AJmp()
    {
        // Constructor
    }

    public AJmp(
        @SuppressWarnings("hiding") PEtiqop _etiqop_,
        @SuppressWarnings("hiding") TGoto _goto_,
        @SuppressWarnings("hiding") PConstante _result_)
    {
        // Constructor
        setEtiqop(_etiqop_);

        setGoto(_goto_);

        setResult(_result_);

    }

    @Override
    public Object clone()
    {
        return new AJmp(
            cloneNode(this._etiqop_),
            cloneNode(this._goto_),
            cloneNode(this._result_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAJmp(this);
    }

    public PEtiqop getEtiqop()
    {
        return this._etiqop_;
    }

    public void setEtiqop(PEtiqop node)
    {
        if(this._etiqop_ != null)
        {
            this._etiqop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._etiqop_ = node;
    }

    public TGoto getGoto()
    {
        return this._goto_;
    }

    public void setGoto(TGoto node)
    {
        if(this._goto_ != null)
        {
            this._goto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._goto_ = node;
    }

    public PConstante getResult()
    {
        return this._result_;
    }

    public void setResult(PConstante node)
    {
        if(this._result_ != null)
        {
            this._result_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._result_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._etiqop_)
            + toString(this._goto_)
            + toString(this._result_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._etiqop_ == child)
        {
            this._etiqop_ = null;
            return;
        }

        if(this._goto_ == child)
        {
            this._goto_ = null;
            return;
        }

        if(this._result_ == child)
        {
            this._result_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._etiqop_ == oldChild)
        {
            setEtiqop((PEtiqop) newChild);
            return;
        }

        if(this._goto_ == oldChild)
        {
            setGoto((TGoto) newChild);
            return;
        }

        if(this._result_ == oldChild)
        {
            setResult((PConstante) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
