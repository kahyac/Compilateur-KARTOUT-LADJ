/* This file was generated by SableCC (http://www.sablecc.org/). */

package c3aParser.analysis;

import java.util.*;
import c3aParser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProg().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        if(node.getListeinst() != null)
        {
            node.getListeinst().apply(this);
        }
        outAProg(node);
    }

    public void inARecursifListeinst(ARecursifListeinst node)
    {
        defaultIn(node);
    }

    public void outARecursifListeinst(ARecursifListeinst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecursifListeinst(ARecursifListeinst node)
    {
        inARecursifListeinst(node);
        if(node.getListeinst() != null)
        {
            node.getListeinst().apply(this);
        }
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        outARecursifListeinst(node);
    }

    public void inAFinalListeinst(AFinalListeinst node)
    {
        defaultIn(node);
    }

    public void outAFinalListeinst(AFinalListeinst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinalListeinst(AFinalListeinst node)
    {
        inAFinalListeinst(node);
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        outAFinalListeinst(node);
    }

    public void inAAddInst(AAddInst node)
    {
        defaultIn(node);
    }

    public void outAAddInst(AAddInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddInst(AAddInst node)
    {
        inAAddInst(node);
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        outAAddInst(node);
    }

    public void inASubInst(ASubInst node)
    {
        defaultIn(node);
    }

    public void outASubInst(ASubInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubInst(ASubInst node)
    {
        inASubInst(node);
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        outASubInst(node);
    }

    public void inAMulInst(AMulInst node)
    {
        defaultIn(node);
    }

    public void outAMulInst(AMulInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulInst(AMulInst node)
    {
        inAMulInst(node);
        if(node.getMul() != null)
        {
            node.getMul().apply(this);
        }
        outAMulInst(node);
    }

    public void inADivInst(ADivInst node)
    {
        defaultIn(node);
    }

    public void outADivInst(ADivInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivInst(ADivInst node)
    {
        inADivInst(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivInst(node);
    }

    public void inAAffInst(AAffInst node)
    {
        defaultIn(node);
    }

    public void outAAffInst(AAffInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffInst(AAffInst node)
    {
        inAAffInst(node);
        if(node.getAffect() != null)
        {
            node.getAffect().apply(this);
        }
        outAAffInst(node);
    }

    public void inAJmpInst(AJmpInst node)
    {
        defaultIn(node);
    }

    public void outAJmpInst(AJmpInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpInst(AJmpInst node)
    {
        inAJmpInst(node);
        if(node.getJmp() != null)
        {
            node.getJmp().apply(this);
        }
        outAJmpInst(node);
    }

    public void inAJmpegInst(AJmpegInst node)
    {
        defaultIn(node);
    }

    public void outAJmpegInst(AJmpegInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpegInst(AJmpegInst node)
    {
        inAJmpegInst(node);
        if(node.getJmpeg() != null)
        {
            node.getJmpeg().apply(this);
        }
        outAJmpegInst(node);
    }

    public void inAJmpnegInst(AJmpnegInst node)
    {
        defaultIn(node);
    }

    public void outAJmpnegInst(AJmpnegInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpnegInst(AJmpnegInst node)
    {
        inAJmpnegInst(node);
        if(node.getJmpneg() != null)
        {
            node.getJmpneg().apply(this);
        }
        outAJmpnegInst(node);
    }

    public void inAJmpinfInst(AJmpinfInst node)
    {
        defaultIn(node);
    }

    public void outAJmpinfInst(AJmpinfInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpinfInst(AJmpinfInst node)
    {
        inAJmpinfInst(node);
        if(node.getJmpinf() != null)
        {
            node.getJmpinf().apply(this);
        }
        outAJmpinfInst(node);
    }

    public void inAJminfegInst(AJminfegInst node)
    {
        defaultIn(node);
    }

    public void outAJminfegInst(AJminfegInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJminfegInst(AJminfegInst node)
    {
        inAJminfegInst(node);
        if(node.getJmpinfeg() != null)
        {
            node.getJmpinfeg().apply(this);
        }
        outAJminfegInst(node);
    }

    public void inAJmpsupInst(AJmpsupInst node)
    {
        defaultIn(node);
    }

    public void outAJmpsupInst(AJmpsupInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpsupInst(AJmpsupInst node)
    {
        inAJmpsupInst(node);
        if(node.getJmpsup() != null)
        {
            node.getJmpsup().apply(this);
        }
        outAJmpsupInst(node);
    }

    public void inAJmpsupegInst(AJmpsupegInst node)
    {
        defaultIn(node);
    }

    public void outAJmpsupegInst(AJmpsupegInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpsupegInst(AJmpsupegInst node)
    {
        inAJmpsupegInst(node);
        if(node.getJmpsupeg() != null)
        {
            node.getJmpsupeg().apply(this);
        }
        outAJmpsupegInst(node);
    }

    public void inAFcallInst(AFcallInst node)
    {
        defaultIn(node);
    }

    public void outAFcallInst(AFcallInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFcallInst(AFcallInst node)
    {
        inAFcallInst(node);
        if(node.getFcall() != null)
        {
            node.getFcall().apply(this);
        }
        outAFcallInst(node);
    }

    public void inAIwriteInst(AIwriteInst node)
    {
        defaultIn(node);
    }

    public void outAIwriteInst(AIwriteInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIwriteInst(AIwriteInst node)
    {
        inAIwriteInst(node);
        if(node.getIwrite() != null)
        {
            node.getIwrite().apply(this);
        }
        outAIwriteInst(node);
    }

    public void inAIreadInst(AIreadInst node)
    {
        defaultIn(node);
    }

    public void outAIreadInst(AIreadInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIreadInst(AIreadInst node)
    {
        inAIreadInst(node);
        if(node.getIread() != null)
        {
            node.getIread().apply(this);
        }
        outAIreadInst(node);
    }

    public void inAArgInst(AArgInst node)
    {
        defaultIn(node);
    }

    public void outAArgInst(AArgInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgInst(AArgInst node)
    {
        inAArgInst(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAArgInst(node);
    }

    public void inAReturnInst(AReturnInst node)
    {
        defaultIn(node);
    }

    public void outAReturnInst(AReturnInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnInst(AReturnInst node)
    {
        inAReturnInst(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnInst(node);
    }

    public void inABeginInst(ABeginInst node)
    {
        defaultIn(node);
    }

    public void outABeginInst(ABeginInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABeginInst(ABeginInst node)
    {
        inABeginInst(node);
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outABeginInst(node);
    }

    public void inAEndInst(AEndInst node)
    {
        defaultIn(node);
    }

    public void outAEndInst(AEndInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndInst(AEndInst node)
    {
        inAEndInst(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outAEndInst(node);
    }

    public void inAStopInst(AStopInst node)
    {
        defaultIn(node);
    }

    public void outAStopInst(AStopInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStopInst(AStopInst node)
    {
        inAStopInst(node);
        if(node.getIstop() != null)
        {
            node.getIstop().apply(this);
        }
        outAStopInst(node);
    }

    public void inAAdd(AAdd node)
    {
        defaultIn(node);
    }

    public void outAAdd(AAdd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdd(AAdd node)
    {
        inAAdd(node);
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getAff() != null)
        {
            node.getAff().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAAdd(node);
    }

    public void inASub(ASub node)
    {
        defaultIn(node);
    }

    public void outASub(ASub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASub(ASub node)
    {
        inASub(node);
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getAff() != null)
        {
            node.getAff().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outASub(node);
    }

    public void inAMul(AMul node)
    {
        defaultIn(node);
    }

    public void outAMul(AMul node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMul(AMul node)
    {
        inAMul(node);
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getFois() != null)
        {
            node.getFois().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getAff() != null)
        {
            node.getAff().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAMul(node);
    }

    public void inADiv(ADiv node)
    {
        defaultIn(node);
    }

    public void outADiv(ADiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiv(ADiv node)
    {
        inADiv(node);
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getDivise() != null)
        {
            node.getDivise().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getAff() != null)
        {
            node.getAff().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outADiv(node);
    }

    public void inAAffect(AAffect node)
    {
        defaultIn(node);
    }

    public void outAAffect(AAffect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffect(AAffect node)
    {
        inAAffect(node);
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getAff() != null)
        {
            node.getAff().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAAffect(node);
    }

    public void inAJmpeg(AJmpeg node)
    {
        defaultIn(node);
    }

    public void outAJmpeg(AJmpeg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpeg(AJmpeg node)
    {
        inAJmpeg(node);
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAJmpeg(node);
    }

    public void inAJmpneg(AJmpneg node)
    {
        defaultIn(node);
    }

    public void outAJmpneg(AJmpneg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpneg(AJmpneg node)
    {
        inAJmpneg(node);
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getNoteq() != null)
        {
            node.getNoteq().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAJmpneg(node);
    }

    public void inAJmpinf(AJmpinf node)
    {
        defaultIn(node);
    }

    public void outAJmpinf(AJmpinf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpinf(AJmpinf node)
    {
        inAJmpinf(node);
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAJmpinf(node);
    }

    public void inAJmpinfeg(AJmpinfeg node)
    {
        defaultIn(node);
    }

    public void outAJmpinfeg(AJmpinfeg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpinfeg(AJmpinfeg node)
    {
        inAJmpinfeg(node);
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getInfeq() != null)
        {
            node.getInfeq().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAJmpinfeg(node);
    }

    public void inAJmpsup(AJmpsup node)
    {
        defaultIn(node);
    }

    public void outAJmpsup(AJmpsup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpsup(AJmpsup node)
    {
        inAJmpsup(node);
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getSup() != null)
        {
            node.getSup().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAJmpsup(node);
    }

    public void inAJmpsupeg(AJmpsupeg node)
    {
        defaultIn(node);
    }

    public void outAJmpsupeg(AJmpsupeg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmpsupeg(AJmpsupeg node)
    {
        inAJmpsupeg(node);
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getSupeq() != null)
        {
            node.getSupeq().apply(this);
        }
        if(node.getOp1() != null)
        {
            node.getOp1().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAJmpsupeg(node);
    }

    public void inAJmp(AJmp node)
    {
        defaultIn(node);
    }

    public void outAJmp(AJmp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJmp(AJmp node)
    {
        inAJmp(node);
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getGoto() != null)
        {
            node.getGoto().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAJmp(node);
    }

    public void inABegin(ABegin node)
    {
        defaultIn(node);
    }

    public void outABegin(ABegin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABegin(ABegin node)
    {
        inABegin(node);
        if(node.getFbegin() != null)
        {
            node.getFbegin().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outABegin(node);
    }

    public void inAEnd(AEnd node)
    {
        defaultIn(node);
    }

    public void outAEnd(AEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnd(AEnd node)
    {
        inAEnd(node);
        if(node.getFend() != null)
        {
            node.getFend().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAEnd(node);
    }

    public void inAFcall(AFcall node)
    {
        defaultIn(node);
    }

    public void outAFcall(AFcall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFcall(AFcall node)
    {
        inAFcall(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        if(node.getAff() != null)
        {
            node.getAff().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAFcall(node);
    }

    public void inAIwrite(AIwrite node)
    {
        defaultIn(node);
    }

    public void outAIwrite(AIwrite node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIwrite(AIwrite node)
    {
        inAIwrite(node);
        if(node.getCtv() != null)
        {
            node.getCtv().apply(this);
        }
        if(node.getWrite() != null)
        {
            node.getWrite().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAIwrite(node);
    }

    public void inAIread(AIread node)
    {
        defaultIn(node);
    }

    public void outAIread(AIread node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIread(AIread node)
    {
        inAIread(node);
        if(node.getRead() != null)
        {
            node.getRead().apply(this);
        }
        if(node.getAff() != null)
        {
            node.getAff().apply(this);
        }
        if(node.getResult() != null)
        {
            node.getResult().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAIread(node);
    }

    public void inAArg(AArg node)
    {
        defaultIn(node);
    }

    public void outAArg(AArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        inAArg(node);
        if(node.getCtv() != null)
        {
            node.getCtv().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAArg(node);
    }

    public void inAReturn(AReturn node)
    {
        defaultIn(node);
    }

    public void outAReturn(AReturn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturn(AReturn node)
    {
        inAReturn(node);
        if(node.getCtv() != null)
        {
            node.getCtv().apply(this);
        }
        if(node.getRet() != null)
        {
            node.getRet().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAReturn(node);
    }

    public void inAIstop(AIstop node)
    {
        defaultIn(node);
    }

    public void outAIstop(AIstop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIstop(AIstop node)
    {
        inAIstop(node);
        if(node.getCtv() != null)
        {
            node.getCtv().apply(this);
        }
        if(node.getStop() != null)
        {
            node.getStop().apply(this);
        }
        if(node.getEtiqop() != null)
        {
            node.getEtiqop().apply(this);
        }
        outAIstop(node);
    }

    public void inACCtv(ACCtv node)
    {
        defaultIn(node);
    }

    public void outACCtv(ACCtv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACCtv(ACCtv node)
    {
        inACCtv(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outACCtv(node);
    }

    public void inATCtv(ATCtv node)
    {
        defaultIn(node);
    }

    public void outATCtv(ATCtv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATCtv(ATCtv node)
    {
        inATCtv(node);
        if(node.getTemporaire() != null)
        {
            node.getTemporaire().apply(this);
        }
        outATCtv(node);
    }

    public void inAVCtv(AVCtv node)
    {
        defaultIn(node);
    }

    public void outAVCtv(AVCtv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVCtv(AVCtv node)
    {
        inAVCtv(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVCtv(node);
    }

    public void inATTv(ATTv node)
    {
        defaultIn(node);
    }

    public void outATTv(ATTv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATTv(ATTv node)
    {
        inATTv(node);
        if(node.getTemporaire() != null)
        {
            node.getTemporaire().apply(this);
        }
        outATTv(node);
    }

    public void inAVTv(AVTv node)
    {
        defaultIn(node);
    }

    public void outAVTv(AVTv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVTv(AVTv node)
    {
        inAVTv(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVTv(node);
    }

    public void inAConstante(AConstante node)
    {
        defaultIn(node);
    }

    public void outAConstante(AConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstante(AConstante node)
    {
        inAConstante(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outAConstante(node);
    }

    public void inATemporaire(ATemporaire node)
    {
        defaultIn(node);
    }

    public void outATemporaire(ATemporaire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATemporaire(ATemporaire node)
    {
        inATemporaire(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getPrefixeTemp() != null)
        {
            node.getPrefixeTemp().apply(this);
        }
        outATemporaire(node);
    }

    public void inAScalaireVariable(AScalaireVariable node)
    {
        defaultIn(node);
    }

    public void outAScalaireVariable(AScalaireVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScalaireVariable(AScalaireVariable node)
    {
        inAScalaireVariable(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outAScalaireVariable(node);
    }

    public void inATabVariable(ATabVariable node)
    {
        defaultIn(node);
    }

    public void outATabVariable(ATabVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabVariable(ATabVariable node)
    {
        inATabVariable(node);
        if(node.getCf() != null)
        {
            node.getCf().apply(this);
        }
        if(node.getCtv() != null)
        {
            node.getCtv().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outATabVariable(node);
    }

    public void inACteEtiqop(ACteEtiqop node)
    {
        defaultIn(node);
    }

    public void outACteEtiqop(ACteEtiqop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACteEtiqop(ACteEtiqop node)
    {
        inACteEtiqop(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outACteEtiqop(node);
    }

    public void inAVideEtiqop(AVideEtiqop node)
    {
        defaultIn(node);
    }

    public void outAVideEtiqop(AVideEtiqop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideEtiqop(AVideEtiqop node)
    {
        inAVideEtiqop(node);
        outAVideEtiqop(node);
    }
}
