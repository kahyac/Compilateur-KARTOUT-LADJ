Package saParser;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10 | 9)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);


po             = '(';
pf             = ')';
saappel        = 'SaAppel';
sadecfonc      = 'SaDecFonc';
sadectab       = 'SaDecTab';
sadecvar       = 'SaDecVar';
sadecvarsimple = 'SaDecVarSimple';
saexpadd       = 'SaExpAdd';
saexpand       = 'SaExpAnd';
saexpappel     = 'SaExpAppel';
saexpdiv       = 'SaExpDiv';
saexpequal     = 'SaExpEqual';
saexpfaux      = 'SaExpFaux';
saexpinf       = 'SaExpInf';
saexpint = 'SaExpInt';
saexplire = 'SaExpLire';
saexpmult = 'SaExpMult';
saexpmodulo = 'SaExpModulo';
saexpnot = 'SaExpNot';
saexpor = 'SaExpOr';
saexpsub = 'SaExpSub';
saexpvar = 'SaExpVar';
saexpvrai = 'SaExpVrai';
sainstaffect = 'SaInstAffect';
saincr= 'SaIncr';
sainstbloc = 'SaInstBloc';
sainstecriture = 'SaInstEcriture';
sainstretour = 'SaInstRetour';
sainstsi = 'SaInstSi';
sainsttantque = 'SaInstTantQue';
saldecfonc = 'SaLDecFonc';
saldecvar = 'SaLDecVar';
salexp = 'SaLExp';
salinst = 'SaLInst';
saprog = 'SaProg';
savarindicee = 'SaVarIndicee';
savarsimple = 'SaVarSimple';
faux = 'faux';
vrai = 'vrai';
lire = 'lire';
null = 'null';
entier = 'entier';
bool = 'bool';
nul = 'nul';
integer  = chiffre+;
id    = alpha alphanum*;

Ignored Tokens

espaces, commentaire;

Productions

prog =         po saprog ldecvar ldecfonc pf;


exp = {add}       po saexpadd   [op1]:exp [op2]:exp pf
    | {and}       po saexpand   [op1]:exp [op2]:exp pf
    | {div}       po saexpdiv   [op1]:exp [op2]:exp pf
    | {equal}     po saexpequal [op1]:exp [op2]:exp pf
    | {inf}       po saexpinf   [op1]:exp [op2]:exp pf
    | {mult}      po saexpmult  [op1]:exp [op2]:exp pf
    | {modulo}    po saexpmodulo [op1]:exp [op2]:exp pf
    | {or}        po saexpor    [op1]:exp [op2]:exp pf
    | {sub}       po saexpsub   [op1]:exp [op2]:exp pf
    | {not}       po saexpnot         exp pf
    | {appel}     po saexpappel appel pf
    | {var}       po saexpvar var pf
    | {faux}      faux
    | {vrai}      vrai
    | {int}       integer
    | {lire}      lire
    ;

inst = {affect}   po sainstaffect   var exp pf
     | {incr}     po saincr         var exp pf
     | {bloc}     po sainstbloc     linst pf
     | {ecriture} po sainstecriture exp pf
     | {retour}   po sainstretour   exp pf
     | {si}       po sainstsi       exp [alors]:inst [sinon]:inst pf
     | {si2}      po sainstsi       exp [alors]:inst null pf
     | {tantque}  po sainsttantque  exp inst pf
     | {appel}    appel
     ;

ldecfonc = {rec} po saldecfonc decfonc ldecfonc pf
         | {fin} null
	 ;

ldecvar = {rec} po saldecvar decvar ldecvar pf
        | {fin} null
	;
	
lexp = {rec} po salexp exp lexp pf
     | {fin} null
     ;
     
linst = {rec} po salinst inst linst pf
      | {fin} null
      ;

decfonc =      po sadecfonc id type [param]:ldecvar [variables]:ldecvar inst pf;

decvar =  {tab}    po sadectab id type integer pf
       |  {simple} po sadecvarsimple id type pf
       ;

var = {indicee} po savarindicee id exp pf
    | {simple} po savarsimple id pf;

appel = po saappel id lexp pf;

type = {entier} entier
     | {bool} bool
     | {null} nul
     ;