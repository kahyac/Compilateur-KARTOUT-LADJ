/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.analysis;

import java.util.*;
import lParser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarListedecvar(ADecvarListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListedecvar(AVideListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARestedecvarListedecvar2(ARestedecvarListedecvar2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListedecvar2(AVideListedecvar2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarsimpleVariable(AVarsimpleVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVartabVariable(AVartabVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEntierTypevar(AEntierTypevar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanTypevar(ABooleanTypevar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfonctionListedecfonc(ADecfonctionListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListedecfonc(AVideListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFonction(AFonction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypevarTypeoptionnel(ATypevarTypeoptionnel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideTypeoptionnel(AVideTypeoptionnel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocinstructions(ABlocinstructions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstructionsListeinstructions(AInstructionsListeinstructions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListeinstructions(AVideListeinstructions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATantqueInstruction(ATantqueInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASialorsInstruction(ASialorsInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASisinonInstruction(ASisinonInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetourInstruction(ARetourInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelfonctionInstruction(AAppelfonctionInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEcrireInstruction(AEcrireInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrvideInstruction(AInstrvideInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstrincrInstruction(AInstrincrInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentificateurVar(AIdentificateurVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACasetableauVar(ACasetableauVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListeparametresListeexpressions(AListeparametresListeexpressions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListeexpressions(AVideListeexpressions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAResteparametrescommencantvirguleListeexpressions2(AResteparametrescommencantvirguleListeexpressions2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideListeexpressions2(AVideListeexpressions2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExpression(AOuExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression2Expression(AExpression2Expression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtExpression2(AEtExpression2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression3Expression2(AExpression3Expression2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalExpression3(AEgalExpression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInferieurExpression3(AInferieurExpression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression4Expression3(AExpression4Expression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpression4(APlusExpression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoinsExpression4(AMoinsExpression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression5Expression4(AExpression5Expression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExpression5(AMultExpression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpression5(ADivExpression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModuloExpression5(AModuloExpression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression6Expression5(AExpression6Expression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonExpression6(ANonExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpression7Expression6(AExpression7Expression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesesExpression7(AParenthesesExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExpression7(AVarExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANombreExpression7(ANombreExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelfonction2Expression7(AAppelfonction2Expression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireExpression7(ALireExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVraiExpression7(AVraiExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFauxExpression7(AFauxExpression7 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgule(TVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNombre(TNombre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEgal(TEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTantque(TTantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaire(TFaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinon(TSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetour(TRetour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPointvirgule(TPointvirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVrai(TVrai node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaux(TFaux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEt(TEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInferieur(TInferieur node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIncr(TIncr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoins(TMoins node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCarre(TCarre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNon(TNon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCo(TCo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCf(TCf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPo(TPo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPf(TPf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAo(TAo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAf(TAf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentif(TIdentif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
