/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.analysis;

import java.util.*;
import lParser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        if(node.getListedecvar() != null)
        {
            node.getListedecvar().apply(this);
        }
        if(node.getListedecfonc() != null)
        {
            node.getListedecfonc().apply(this);
        }
        outAProgramme(node);
    }

    public void inADecvarListedecvar(ADecvarListedecvar node)
    {
        defaultIn(node);
    }

    public void outADecvarListedecvar(ADecvarListedecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecvarListedecvar(ADecvarListedecvar node)
    {
        inADecvarListedecvar(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getListedecvar2() != null)
        {
            node.getListedecvar2().apply(this);
        }
        outADecvarListedecvar(node);
    }

    public void inAVideListedecvar(AVideListedecvar node)
    {
        defaultIn(node);
    }

    public void outAVideListedecvar(AVideListedecvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListedecvar(AVideListedecvar node)
    {
        inAVideListedecvar(node);
        outAVideListedecvar(node);
    }

    public void inARestedecvarListedecvar2(ARestedecvarListedecvar2 node)
    {
        defaultIn(node);
    }

    public void outARestedecvarListedecvar2(ARestedecvarListedecvar2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestedecvarListedecvar2(ARestedecvarListedecvar2 node)
    {
        inARestedecvarListedecvar2(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getListedecvar2() != null)
        {
            node.getListedecvar2().apply(this);
        }
        outARestedecvarListedecvar2(node);
    }

    public void inAVideListedecvar2(AVideListedecvar2 node)
    {
        defaultIn(node);
    }

    public void outAVideListedecvar2(AVideListedecvar2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListedecvar2(AVideListedecvar2 node)
    {
        inAVideListedecvar2(node);
        outAVideListedecvar2(node);
    }

    public void inAVarsimpleVariable(AVarsimpleVariable node)
    {
        defaultIn(node);
    }

    public void outAVarsimpleVariable(AVarsimpleVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarsimpleVariable(AVarsimpleVariable node)
    {
        inAVarsimpleVariable(node);
        if(node.getPremier() != null)
        {
            node.getPremier().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outAVarsimpleVariable(node);
    }

    public void inAVartabVariable(AVartabVariable node)
    {
        defaultIn(node);
    }

    public void outAVartabVariable(AVartabVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVartabVariable(AVartabVariable node)
    {
        inAVartabVariable(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getCf() != null)
        {
            node.getCf().apply(this);
        }
        outAVartabVariable(node);
    }

    public void inAEntierTypevar(AEntierTypevar node)
    {
        defaultIn(node);
    }

    public void outAEntierTypevar(AEntierTypevar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierTypevar(AEntierTypevar node)
    {
        inAEntierTypevar(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierTypevar(node);
    }

    public void inABooleanTypevar(ABooleanTypevar node)
    {
        defaultIn(node);
    }

    public void outABooleanTypevar(ABooleanTypevar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanTypevar(ABooleanTypevar node)
    {
        inABooleanTypevar(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABooleanTypevar(node);
    }

    public void inADecfonctionListedecfonc(ADecfonctionListedecfonc node)
    {
        defaultIn(node);
    }

    public void outADecfonctionListedecfonc(ADecfonctionListedecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecfonctionListedecfonc(ADecfonctionListedecfonc node)
    {
        inADecfonctionListedecfonc(node);
        if(node.getFonction() != null)
        {
            node.getFonction().apply(this);
        }
        if(node.getListedecfonc() != null)
        {
            node.getListedecfonc().apply(this);
        }
        outADecfonctionListedecfonc(node);
    }

    public void inAVideListedecfonc(AVideListedecfonc node)
    {
        defaultIn(node);
    }

    public void outAVideListedecfonc(AVideListedecfonc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListedecfonc(AVideListedecfonc node)
    {
        inAVideListedecfonc(node);
        outAVideListedecfonc(node);
    }

    public void inAFonction(AFonction node)
    {
        defaultIn(node);
    }

    public void outAFonction(AFonction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFonction(AFonction node)
    {
        inAFonction(node);
        if(node.getTypeoptionnel() != null)
        {
            node.getTypeoptionnel().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getPremier() != null)
        {
            node.getPremier().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getBlocinstructions() != null)
        {
            node.getBlocinstructions().apply(this);
        }
        outAFonction(node);
    }

    public void inATypevarTypeoptionnel(ATypevarTypeoptionnel node)
    {
        defaultIn(node);
    }

    public void outATypevarTypeoptionnel(ATypevarTypeoptionnel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypevarTypeoptionnel(ATypevarTypeoptionnel node)
    {
        inATypevarTypeoptionnel(node);
        if(node.getTypevar() != null)
        {
            node.getTypevar().apply(this);
        }
        outATypevarTypeoptionnel(node);
    }

    public void inAVideTypeoptionnel(AVideTypeoptionnel node)
    {
        defaultIn(node);
    }

    public void outAVideTypeoptionnel(AVideTypeoptionnel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideTypeoptionnel(AVideTypeoptionnel node)
    {
        inAVideTypeoptionnel(node);
        outAVideTypeoptionnel(node);
    }

    public void inABlocinstructions(ABlocinstructions node)
    {
        defaultIn(node);
    }

    public void outABlocinstructions(ABlocinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocinstructions(ABlocinstructions node)
    {
        inABlocinstructions(node);
        if(node.getAo() != null)
        {
            node.getAo().apply(this);
        }
        if(node.getListeinstructions() != null)
        {
            node.getListeinstructions().apply(this);
        }
        if(node.getAf() != null)
        {
            node.getAf().apply(this);
        }
        outABlocinstructions(node);
    }

    public void inAInstructionsListeinstructions(AInstructionsListeinstructions node)
    {
        defaultIn(node);
    }

    public void outAInstructionsListeinstructions(AInstructionsListeinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructionsListeinstructions(AInstructionsListeinstructions node)
    {
        inAInstructionsListeinstructions(node);
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        if(node.getListeinstructions() != null)
        {
            node.getListeinstructions().apply(this);
        }
        outAInstructionsListeinstructions(node);
    }

    public void inAVideListeinstructions(AVideListeinstructions node)
    {
        defaultIn(node);
    }

    public void outAVideListeinstructions(AVideListeinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeinstructions(AVideListeinstructions node)
    {
        inAVideListeinstructions(node);
        outAVideListeinstructions(node);
    }

    public void inAAffectationInstruction(AAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAAffectationInstruction(AAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        inAAffectationInstruction(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPointvirgule() != null)
        {
            node.getPointvirgule().apply(this);
        }
        outAAffectationInstruction(node);
    }

    public void inATantqueInstruction(ATantqueInstruction node)
    {
        defaultIn(node);
    }

    public void outATantqueInstruction(ATantqueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantqueInstruction(ATantqueInstruction node)
    {
        inATantqueInstruction(node);
        if(node.getTantque() != null)
        {
            node.getTantque().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getBlocinstructions() != null)
        {
            node.getBlocinstructions().apply(this);
        }
        outATantqueInstruction(node);
    }

    public void inASialorsInstruction(ASialorsInstruction node)
    {
        defaultIn(node);
    }

    public void outASialorsInstruction(ASialorsInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASialorsInstruction(ASialorsInstruction node)
    {
        inASialorsInstruction(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getBlocinstructions() != null)
        {
            node.getBlocinstructions().apply(this);
        }
        outASialorsInstruction(node);
    }

    public void inASisinonInstruction(ASisinonInstruction node)
    {
        defaultIn(node);
    }

    public void outASisinonInstruction(ASisinonInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASisinonInstruction(ASisinonInstruction node)
    {
        inASisinonInstruction(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getPremier() != null)
        {
            node.getPremier().apply(this);
        }
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outASisinonInstruction(node);
    }

    public void inARetourInstruction(ARetourInstruction node)
    {
        defaultIn(node);
    }

    public void outARetourInstruction(ARetourInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetourInstruction(ARetourInstruction node)
    {
        inARetourInstruction(node);
        if(node.getRetour() != null)
        {
            node.getRetour().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPointvirgule() != null)
        {
            node.getPointvirgule().apply(this);
        }
        outARetourInstruction(node);
    }

    public void inAAppelfonctionInstruction(AAppelfonctionInstruction node)
    {
        defaultIn(node);
    }

    public void outAAppelfonctionInstruction(AAppelfonctionInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelfonctionInstruction(AAppelfonctionInstruction node)
    {
        inAAppelfonctionInstruction(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getListeexpressions() != null)
        {
            node.getListeexpressions().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        if(node.getPointvirgule() != null)
        {
            node.getPointvirgule().apply(this);
        }
        outAAppelfonctionInstruction(node);
    }

    public void inAEcrireInstruction(AEcrireInstruction node)
    {
        defaultIn(node);
    }

    public void outAEcrireInstruction(AEcrireInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrireInstruction(AEcrireInstruction node)
    {
        inAEcrireInstruction(node);
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        if(node.getPointvirgule() != null)
        {
            node.getPointvirgule().apply(this);
        }
        outAEcrireInstruction(node);
    }

    public void inAInstrvideInstruction(AInstrvideInstruction node)
    {
        defaultIn(node);
    }

    public void outAInstrvideInstruction(AInstrvideInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstrvideInstruction(AInstrvideInstruction node)
    {
        inAInstrvideInstruction(node);
        if(node.getPointvirgule() != null)
        {
            node.getPointvirgule().apply(this);
        }
        outAInstrvideInstruction(node);
    }

    public void inAIdentificateurVar(AIdentificateurVar node)
    {
        defaultIn(node);
    }

    public void outAIdentificateurVar(AIdentificateurVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificateurVar(AIdentificateurVar node)
    {
        inAIdentificateurVar(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        outAIdentificateurVar(node);
    }

    public void inACasetableauVar(ACasetableauVar node)
    {
        defaultIn(node);
    }

    public void outACasetableauVar(ACasetableauVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasetableauVar(ACasetableauVar node)
    {
        inACasetableauVar(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCf() != null)
        {
            node.getCf().apply(this);
        }
        outACasetableauVar(node);
    }

    public void inAListeparametresListeexpressions(AListeparametresListeexpressions node)
    {
        defaultIn(node);
    }

    public void outAListeparametresListeexpressions(AListeparametresListeexpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeparametresListeexpressions(AListeparametresListeexpressions node)
    {
        inAListeparametresListeexpressions(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getListeexpressions2() != null)
        {
            node.getListeexpressions2().apply(this);
        }
        outAListeparametresListeexpressions(node);
    }

    public void inAVideListeexpressions(AVideListeexpressions node)
    {
        defaultIn(node);
    }

    public void outAVideListeexpressions(AVideListeexpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeexpressions(AVideListeexpressions node)
    {
        inAVideListeexpressions(node);
        outAVideListeexpressions(node);
    }

    public void inAResteparametrescommencantvirguleListeexpressions2(AResteparametrescommencantvirguleListeexpressions2 node)
    {
        defaultIn(node);
    }

    public void outAResteparametrescommencantvirguleListeexpressions2(AResteparametrescommencantvirguleListeexpressions2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAResteparametrescommencantvirguleListeexpressions2(AResteparametrescommencantvirguleListeexpressions2 node)
    {
        inAResteparametrescommencantvirguleListeexpressions2(node);
        if(node.getVirgule() != null)
        {
            node.getVirgule().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getListeexpressions2() != null)
        {
            node.getListeexpressions2().apply(this);
        }
        outAResteparametrescommencantvirguleListeexpressions2(node);
    }

    public void inAVideListeexpressions2(AVideListeexpressions2 node)
    {
        defaultIn(node);
    }

    public void outAVideListeexpressions2(AVideListeexpressions2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideListeexpressions2(AVideListeexpressions2 node)
    {
        inAVideListeexpressions2(node);
        outAVideListeexpressions2(node);
    }

    public void inAOuExpression(AOuExpression node)
    {
        defaultIn(node);
    }

    public void outAOuExpression(AOuExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpression(AOuExpression node)
    {
        inAOuExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAOuExpression(node);
    }

    public void inAExpression2Expression(AExpression2Expression node)
    {
        defaultIn(node);
    }

    public void outAExpression2Expression(AExpression2Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression2Expression(AExpression2Expression node)
    {
        inAExpression2Expression(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAExpression2Expression(node);
    }

    public void inAEtExpression2(AEtExpression2 node)
    {
        defaultIn(node);
    }

    public void outAEtExpression2(AEtExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtExpression2(AEtExpression2 node)
    {
        inAEtExpression2(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getEt() != null)
        {
            node.getEt().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAEtExpression2(node);
    }

    public void inAExpression3Expression2(AExpression3Expression2 node)
    {
        defaultIn(node);
    }

    public void outAExpression3Expression2(AExpression3Expression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression3Expression2(AExpression3Expression2 node)
    {
        inAExpression3Expression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAExpression3Expression2(node);
    }

    public void inAEgalExpression3(AEgalExpression3 node)
    {
        defaultIn(node);
    }

    public void outAEgalExpression3(AEgalExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEgalExpression3(AEgalExpression3 node)
    {
        inAEgalExpression3(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAEgalExpression3(node);
    }

    public void inAInferieurExpression3(AInferieurExpression3 node)
    {
        defaultIn(node);
    }

    public void outAInferieurExpression3(AInferieurExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInferieurExpression3(AInferieurExpression3 node)
    {
        inAInferieurExpression3(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getInferieur() != null)
        {
            node.getInferieur().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAInferieurExpression3(node);
    }

    public void inAExpression4Expression3(AExpression4Expression3 node)
    {
        defaultIn(node);
    }

    public void outAExpression4Expression3(AExpression4Expression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression4Expression3(AExpression4Expression3 node)
    {
        inAExpression4Expression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAExpression4Expression3(node);
    }

    public void inAPlusExpression4(APlusExpression4 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression4(APlusExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpression4(APlusExpression4 node)
    {
        inAPlusExpression4(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAPlusExpression4(node);
    }

    public void inAMoinsExpression4(AMoinsExpression4 node)
    {
        defaultIn(node);
    }

    public void outAMoinsExpression4(AMoinsExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoinsExpression4(AMoinsExpression4 node)
    {
        inAMoinsExpression4(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAMoinsExpression4(node);
    }

    public void inAExpression5Expression4(AExpression5Expression4 node)
    {
        defaultIn(node);
    }

    public void outAExpression5Expression4(AExpression5Expression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression5Expression4(AExpression5Expression4 node)
    {
        inAExpression5Expression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAExpression5Expression4(node);
    }

    public void inAMultExpression5(AMultExpression5 node)
    {
        defaultIn(node);
    }

    public void outAMultExpression5(AMultExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpression5(AMultExpression5 node)
    {
        inAMultExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAMultExpression5(node);
    }

    public void inADivExpression5(ADivExpression5 node)
    {
        defaultIn(node);
    }

    public void outADivExpression5(ADivExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpression5(ADivExpression5 node)
    {
        inADivExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outADivExpression5(node);
    }

    public void inAExpression6Expression5(AExpression6Expression5 node)
    {
        defaultIn(node);
    }

    public void outAExpression6Expression5(AExpression6Expression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression6Expression5(AExpression6Expression5 node)
    {
        inAExpression6Expression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAExpression6Expression5(node);
    }

    public void inANonExpression6(ANonExpression6 node)
    {
        defaultIn(node);
    }

    public void outANonExpression6(ANonExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExpression6(ANonExpression6 node)
    {
        inANonExpression6(node);
        if(node.getNon() != null)
        {
            node.getNon().apply(this);
        }
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outANonExpression6(node);
    }

    public void inAExpression7Expression6(AExpression7Expression6 node)
    {
        defaultIn(node);
    }

    public void outAExpression7Expression6(AExpression7Expression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression7Expression6(AExpression7Expression6 node)
    {
        inAExpression7Expression6(node);
        if(node.getExpression7() != null)
        {
            node.getExpression7().apply(this);
        }
        outAExpression7Expression6(node);
    }

    public void inAParenthesesExpression7(AParenthesesExpression7 node)
    {
        defaultIn(node);
    }

    public void outAParenthesesExpression7(AParenthesesExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesExpression7(AParenthesesExpression7 node)
    {
        inAParenthesesExpression7(node);
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAParenthesesExpression7(node);
    }

    public void inAVarExpression7(AVarExpression7 node)
    {
        defaultIn(node);
    }

    public void outAVarExpression7(AVarExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpression7(AVarExpression7 node)
    {
        inAVarExpression7(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpression7(node);
    }

    public void inANombreExpression7(ANombreExpression7 node)
    {
        defaultIn(node);
    }

    public void outANombreExpression7(ANombreExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANombreExpression7(ANombreExpression7 node)
    {
        inANombreExpression7(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outANombreExpression7(node);
    }

    public void inAAppelfonction2Expression7(AAppelfonction2Expression7 node)
    {
        defaultIn(node);
    }

    public void outAAppelfonction2Expression7(AAppelfonction2Expression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppelfonction2Expression7(AAppelfonction2Expression7 node)
    {
        inAAppelfonction2Expression7(node);
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getListeexpressions() != null)
        {
            node.getListeexpressions().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outAAppelfonction2Expression7(node);
    }

    public void inALireExpression7(ALireExpression7 node)
    {
        defaultIn(node);
    }

    public void outALireExpression7(ALireExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireExpression7(ALireExpression7 node)
    {
        inALireExpression7(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        if(node.getPo() != null)
        {
            node.getPo().apply(this);
        }
        if(node.getPf() != null)
        {
            node.getPf().apply(this);
        }
        outALireExpression7(node);
    }

    public void inAVraiExpression7(AVraiExpression7 node)
    {
        defaultIn(node);
    }

    public void outAVraiExpression7(AVraiExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVraiExpression7(AVraiExpression7 node)
    {
        inAVraiExpression7(node);
        if(node.getVrai() != null)
        {
            node.getVrai().apply(this);
        }
        outAVraiExpression7(node);
    }

    public void inAFauxExpression7(AFauxExpression7 node)
    {
        defaultIn(node);
    }

    public void outAFauxExpression7(AFauxExpression7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFauxExpression7(AFauxExpression7 node)
    {
        inAFauxExpression7(node);
        if(node.getFaux() != null)
        {
            node.getFaux().apply(this);
        }
        outAFauxExpression7(node);
    }
}
