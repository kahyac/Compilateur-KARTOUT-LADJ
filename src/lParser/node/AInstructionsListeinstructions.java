/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class AInstructionsListeinstructions extends PListeinstructions
{
    private PInstruction _instruction_;
    private PListeinstructions _listeinstructions_;

    public AInstructionsListeinstructions()
    {
        // Constructor
    }

    public AInstructionsListeinstructions(
        @SuppressWarnings("hiding") PInstruction _instruction_,
        @SuppressWarnings("hiding") PListeinstructions _listeinstructions_)
    {
        // Constructor
        setInstruction(_instruction_);

        setListeinstructions(_listeinstructions_);

    }

    @Override
    public Object clone()
    {
        return new AInstructionsListeinstructions(
            cloneNode(this._instruction_),
            cloneNode(this._listeinstructions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstructionsListeinstructions(this);
    }

    public PInstruction getInstruction()
    {
        return this._instruction_;
    }

    public void setInstruction(PInstruction node)
    {
        if(this._instruction_ != null)
        {
            this._instruction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instruction_ = node;
    }

    public PListeinstructions getListeinstructions()
    {
        return this._listeinstructions_;
    }

    public void setListeinstructions(PListeinstructions node)
    {
        if(this._listeinstructions_ != null)
        {
            this._listeinstructions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeinstructions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._instruction_)
            + toString(this._listeinstructions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._instruction_ == child)
        {
            this._instruction_ = null;
            return;
        }

        if(this._listeinstructions_ == child)
        {
            this._listeinstructions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._instruction_ == oldChild)
        {
            setInstruction((PInstruction) newChild);
            return;
        }

        if(this._listeinstructions_ == oldChild)
        {
            setListeinstructions((PListeinstructions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
