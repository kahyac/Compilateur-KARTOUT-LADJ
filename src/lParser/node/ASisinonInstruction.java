/* This file was generated by SableCC (http://www.sablecc.org/). */

package lParser.node;

import lParser.analysis.*;

@SuppressWarnings("nls")
public final class ASisinonInstruction extends PInstruction
{
    private TSi _si_;
    private PExpression _expression_;
    private TAlors _alors_;
    private PBlocinstructions _premier_;
    private TSinon _sinon_;
    private PBlocinstructions _second_;

    public ASisinonInstruction()
    {
        // Constructor
    }

    public ASisinonInstruction(
        @SuppressWarnings("hiding") TSi _si_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TAlors _alors_,
        @SuppressWarnings("hiding") PBlocinstructions _premier_,
        @SuppressWarnings("hiding") TSinon _sinon_,
        @SuppressWarnings("hiding") PBlocinstructions _second_)
    {
        // Constructor
        setSi(_si_);

        setExpression(_expression_);

        setAlors(_alors_);

        setPremier(_premier_);

        setSinon(_sinon_);

        setSecond(_second_);

    }

    @Override
    public Object clone()
    {
        return new ASisinonInstruction(
            cloneNode(this._si_),
            cloneNode(this._expression_),
            cloneNode(this._alors_),
            cloneNode(this._premier_),
            cloneNode(this._sinon_),
            cloneNode(this._second_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASisinonInstruction(this);
    }

    public TSi getSi()
    {
        return this._si_;
    }

    public void setSi(TSi node)
    {
        if(this._si_ != null)
        {
            this._si_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._si_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TAlors getAlors()
    {
        return this._alors_;
    }

    public void setAlors(TAlors node)
    {
        if(this._alors_ != null)
        {
            this._alors_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alors_ = node;
    }

    public PBlocinstructions getPremier()
    {
        return this._premier_;
    }

    public void setPremier(PBlocinstructions node)
    {
        if(this._premier_ != null)
        {
            this._premier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._premier_ = node;
    }

    public TSinon getSinon()
    {
        return this._sinon_;
    }

    public void setSinon(TSinon node)
    {
        if(this._sinon_ != null)
        {
            this._sinon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sinon_ = node;
    }

    public PBlocinstructions getSecond()
    {
        return this._second_;
    }

    public void setSecond(PBlocinstructions node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._si_)
            + toString(this._expression_)
            + toString(this._alors_)
            + toString(this._premier_)
            + toString(this._sinon_)
            + toString(this._second_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._si_ == child)
        {
            this._si_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._alors_ == child)
        {
            this._alors_ = null;
            return;
        }

        if(this._premier_ == child)
        {
            this._premier_ = null;
            return;
        }

        if(this._sinon_ == child)
        {
            this._sinon_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._si_ == oldChild)
        {
            setSi((TSi) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._alors_ == oldChild)
        {
            setAlors((TAlors) newChild);
            return;
        }

        if(this._premier_ == oldChild)
        {
            setPremier((PBlocinstructions) newChild);
            return;
        }

        if(this._sinon_ == oldChild)
        {
            setSinon((TSinon) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((PBlocinstructions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
