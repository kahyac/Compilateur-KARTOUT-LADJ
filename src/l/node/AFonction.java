/* This file was generated by SableCC (http://www.sablecc.org/). */

package l.node;

import l.analysis.*;

@SuppressWarnings("nls")
public final class AFonction extends PFonction
{
    private PTypeoptionnel _typeoptionnel_;
    private TIdentif _identif_;
    private TPo _po_;
    private PListedecvar _premier_;
    private TPf _pf_;
    private PListedecvar _second_;
    private PBlocinstructions _blocinstructions_;

    public AFonction()
    {
        // Constructor
    }

    public AFonction(
        @SuppressWarnings("hiding") PTypeoptionnel _typeoptionnel_,
        @SuppressWarnings("hiding") TIdentif _identif_,
        @SuppressWarnings("hiding") TPo _po_,
        @SuppressWarnings("hiding") PListedecvar _premier_,
        @SuppressWarnings("hiding") TPf _pf_,
        @SuppressWarnings("hiding") PListedecvar _second_,
        @SuppressWarnings("hiding") PBlocinstructions _blocinstructions_)
    {
        // Constructor
        setTypeoptionnel(_typeoptionnel_);

        setIdentif(_identif_);

        setPo(_po_);

        setPremier(_premier_);

        setPf(_pf_);

        setSecond(_second_);

        setBlocinstructions(_blocinstructions_);

    }

    @Override
    public Object clone()
    {
        return new AFonction(
            cloneNode(this._typeoptionnel_),
            cloneNode(this._identif_),
            cloneNode(this._po_),
            cloneNode(this._premier_),
            cloneNode(this._pf_),
            cloneNode(this._second_),
            cloneNode(this._blocinstructions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFonction(this);
    }

    public PTypeoptionnel getTypeoptionnel()
    {
        return this._typeoptionnel_;
    }

    public void setTypeoptionnel(PTypeoptionnel node)
    {
        if(this._typeoptionnel_ != null)
        {
            this._typeoptionnel_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeoptionnel_ = node;
    }

    public TIdentif getIdentif()
    {
        return this._identif_;
    }

    public void setIdentif(TIdentif node)
    {
        if(this._identif_ != null)
        {
            this._identif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identif_ = node;
    }

    public TPo getPo()
    {
        return this._po_;
    }

    public void setPo(TPo node)
    {
        if(this._po_ != null)
        {
            this._po_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._po_ = node;
    }

    public PListedecvar getPremier()
    {
        return this._premier_;
    }

    public void setPremier(PListedecvar node)
    {
        if(this._premier_ != null)
        {
            this._premier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._premier_ = node;
    }

    public TPf getPf()
    {
        return this._pf_;
    }

    public void setPf(TPf node)
    {
        if(this._pf_ != null)
        {
            this._pf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pf_ = node;
    }

    public PListedecvar getSecond()
    {
        return this._second_;
    }

    public void setSecond(PListedecvar node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public PBlocinstructions getBlocinstructions()
    {
        return this._blocinstructions_;
    }

    public void setBlocinstructions(PBlocinstructions node)
    {
        if(this._blocinstructions_ != null)
        {
            this._blocinstructions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blocinstructions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeoptionnel_)
            + toString(this._identif_)
            + toString(this._po_)
            + toString(this._premier_)
            + toString(this._pf_)
            + toString(this._second_)
            + toString(this._blocinstructions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeoptionnel_ == child)
        {
            this._typeoptionnel_ = null;
            return;
        }

        if(this._identif_ == child)
        {
            this._identif_ = null;
            return;
        }

        if(this._po_ == child)
        {
            this._po_ = null;
            return;
        }

        if(this._premier_ == child)
        {
            this._premier_ = null;
            return;
        }

        if(this._pf_ == child)
        {
            this._pf_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._blocinstructions_ == child)
        {
            this._blocinstructions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typeoptionnel_ == oldChild)
        {
            setTypeoptionnel((PTypeoptionnel) newChild);
            return;
        }

        if(this._identif_ == oldChild)
        {
            setIdentif((TIdentif) newChild);
            return;
        }

        if(this._po_ == oldChild)
        {
            setPo((TPo) newChild);
            return;
        }

        if(this._premier_ == oldChild)
        {
            setPremier((PListedecvar) newChild);
            return;
        }

        if(this._pf_ == oldChild)
        {
            setPf((TPf) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((PListedecvar) newChild);
            return;
        }

        if(this._blocinstructions_ == oldChild)
        {
            setBlocinstructions((PBlocinstructions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
