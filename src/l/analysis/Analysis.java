/* This file was generated by SableCC (http://www.sablecc.org/). */

package l.analysis;

import l.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseADecvarListedecvar(ADecvarListedecvar node);
    void caseAVideListedecvar(AVideListedecvar node);
    void caseARestedecvarListedecvar2(ARestedecvarListedecvar2 node);
    void caseAVideListedecvar2(AVideListedecvar2 node);
    void caseAVarsimpleVariable(AVarsimpleVariable node);
    void caseAVartabVariable(AVartabVariable node);
    void caseAEntierTypevar(AEntierTypevar node);
    void caseABooleanTypevar(ABooleanTypevar node);
    void caseADecfonctionListedecfonc(ADecfonctionListedecfonc node);
    void caseAVideListedecfonc(AVideListedecfonc node);
    void caseAFonction(AFonction node);
    void caseATypevarTypeoptionnel(ATypevarTypeoptionnel node);
    void caseAVideTypeoptionnel(AVideTypeoptionnel node);
    void caseABlocinstructions(ABlocinstructions node);
    void caseAInstructionsListeinstructions(AInstructionsListeinstructions node);
    void caseAVideListeinstructions(AVideListeinstructions node);
    void caseAAffectationInstruction(AAffectationInstruction node);
    void caseATantqueInstruction(ATantqueInstruction node);
    void caseASialorsInstruction(ASialorsInstruction node);
    void caseASisinonInstruction(ASisinonInstruction node);
    void caseARetourInstruction(ARetourInstruction node);
    void caseAAppelfonctionInstruction(AAppelfonctionInstruction node);
    void caseAEcrireInstruction(AEcrireInstruction node);
    void caseAFairetantqueInstruction(AFairetantqueInstruction node);
    void caseAIdentificateurVar(AIdentificateurVar node);
    void caseACasetableauVar(ACasetableauVar node);
    void caseAListeparametresListeexpressions(AListeparametresListeexpressions node);
    void caseAVideListeexpressions(AVideListeexpressions node);
    void caseAResteparametrescommencantvirguleListeexpressions2(AResteparametrescommencantvirguleListeexpressions2 node);
    void caseAVideListeexpressions2(AVideListeexpressions2 node);
    void caseAOuExpression(AOuExpression node);
    void caseAExpression2Expression(AExpression2Expression node);
    void caseAEtExpression2(AEtExpression2 node);
    void caseAExpression3Expression2(AExpression3Expression2 node);
    void caseAEgalExpression3(AEgalExpression3 node);
    void caseAInferieurExpression3(AInferieurExpression3 node);
    void caseAExpression4Expression3(AExpression4Expression3 node);
    void caseAPlusExpression4(APlusExpression4 node);
    void caseAMoinsExpression4(AMoinsExpression4 node);
    void caseAExpression5Expression4(AExpression5Expression4 node);
    void caseAMultExpression5(AMultExpression5 node);
    void caseADivExpression5(ADivExpression5 node);
    void caseAExpression6Expression5(AExpression6Expression5 node);
    void caseANonExpression6(ANonExpression6 node);
    void caseAExpressioncarreExpression6(AExpressioncarreExpression6 node);
    void caseACarreExpressioncarre(ACarreExpressioncarre node);
    void caseAExpression7Expressioncarre(AExpression7Expressioncarre node);
    void caseAParenthesesExpression7(AParenthesesExpression7 node);
    void caseAVarExpression7(AVarExpression7 node);
    void caseANombreExpression7(ANombreExpression7 node);
    void caseAAppelfonction2Expression7(AAppelfonction2Expression7 node);
    void caseALireExpression7(ALireExpression7 node);
    void caseAVraiExpression7(AVraiExpression7 node);
    void caseAFauxExpression7(AFauxExpression7 node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTVirgule(TVirgule node);
    void caseTNombre(TNombre node);
    void caseTEntier(TEntier node);
    void caseTBool(TBool node);
    void caseTEgal(TEgal node);
    void caseTTantque(TTantque node);
    void caseTFaire(TFaire node);
    void caseTSi(TSi node);
    void caseTAlors(TAlors node);
    void caseTSinon(TSinon node);
    void caseTRetour(TRetour node);
    void caseTPointvirgule(TPointvirgule node);
    void caseTEcrire(TEcrire node);
    void caseTLire(TLire node);
    void caseTVrai(TVrai node);
    void caseTFaux(TFaux node);
    void caseTOu(TOu node);
    void caseTEt(TEt node);
    void caseTInferieur(TInferieur node);
    void caseTPlus(TPlus node);
    void caseTMoins(TMoins node);
    void caseTMult(TMult node);
    void caseTCarre(TCarre node);
    void caseTDiv(TDiv node);
    void caseTNon(TNon node);
    void caseTCo(TCo node);
    void caseTCf(TCf node);
    void caseTPo(TPo node);
    void caseTPf(TPf node);
    void caseTAo(TAo node);
    void caseTAf(TAf node);
    void caseTIdentif(TIdentif node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
