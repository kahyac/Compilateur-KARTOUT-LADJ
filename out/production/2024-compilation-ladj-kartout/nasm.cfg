Package nasmParser;

Helpers

letter = [['a' .. 'z'] + ['A' .. 'Z']];
digit = ['0' .. '9'];
alpha = [letter + ['_' + '$']];
alphanum = [letter + digit];

Tokens

spaces = (' ' | 13 | 10 | 9)+;
comment= ';' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

plus       = '+';
minus      = '-';
times      = '*';
brackopen  = '[';
brackclose = ']';
semicol    = ':';
comma      = ',';
quote      = ''';
dot        = '.';
percentage = '%';
byte       = 'byte';
word       = 'word';
dword      = 'dword';
prefix_register = '@';

inc = 'include';
section = 'section';

data =             '.data';
definebyte =       'db';
defineword =       'dw';
definedoubleword = 'dd';
definequadword =   'dq';
definetenbytes =   'dt';

bss =               '.bss';
reservebyte =       'resb';
reserveword =       'resw';
reservedoubleword = 'resd';
reservequadword =   'resq';
reservetenbytes =   'rest';

text = '.text';

global = 'global';

mov =  'mov';
push = 'push';
pop =  'pop';
add =  'add';
sub =  'sub';
imul = 'imul';
idiv = 'idiv';
and =  'and';
or =   'or';
xor =  'xor';
not =  'not';
cmp =  'cmp';
jmp =  'jmp';
je =   'je';
jne =  'jne';
jg =   'jg';
jge =  'jge';
jl =   'jl';
jle =  'jle';
call = 'call';
ret =   'ret';
int =	'int 0x80';

eax =  'eax';
ebx =  'ebx';
ecx =  'ecx';
edx =  'edx';
ebp =  'ebp';
esp =  'esp';

number  = digit+;

id    = alpha alphanum*;

Ignored Tokens

spaces, comment;

Productions

prog = linclude secdata secbss sectext;

linclude = {rec} include linclude 
         | {empty};

include = percentage inc [open]: quote filename [close]: quote ;

filename =   {simple} label 
           | {complex} [prefix]: label dot [suffix]: label
           ;

secdata =   {nonempty} section data lconst
          | {empty}
	  ;

lconst =   {rec} const lconst
         | {empty} ;

const =        {db} label definebyte numconst
             | {dw} label defineword numconst
             | {dd} label definedoubleword numconst
             | {dq} label definequadword numconst
             | {dt} label definetenbytes numconst
             ;

secbss =   {nonempty} section bss lvar
         | {empty}
	 ;

lvar =   {rec} var lvar
       | {empty}
       ;

var =          {resb} label semicol reservebyte number
             | {resw} label semicol reserveword number
             | {resd} label semicol reservedoubleword number
             | {resq} label semicol reservequadword number
             | {rest} label semicol reservetenbytes number
             ;

sectext = section text lglobal linst;

lglobal = {rec} global label lglobal
        | {empty}
        ;

linst = {rec} inst linst |
        {last} inst
	;

inst =   {mov}    oplabel mov  ar comma acr
       | {push}   oplabel push acr
       | {pop}    oplabel pop  ar
       | {add}    oplabel add  ar comma acr
       | {sub}    oplabel sub  ar comma acr
       | {imul}   oplabel imul ar comma acr
       | {idiv}   oplabel idiv ar
       | {and}    oplabel and  ar comma acr
       | {or}     oplabel or   ar comma acr
       | {xor}    oplabel xor  ar comma acr
       | {not}    oplabel not  ar
       | {cmp}    oplabel cmp  ar comma acr
       | {jmp}    oplabel jmp  label
       | {je}     oplabel je   label
       | {jne}    oplabel jne  label
       | {jg}     oplabel jg   label
       | {jge}    oplabel jge  label
       | {jl}     oplabel jl   label
       | {call}   oplabel call label
       | {ret}    oplabel ret
       | {inter}  oplabel int
       ;

acr = {address} address
    | {numconst} numconst
    | {register} register
    ;

ar = {address} address
   | {register} register
   ;

address = opsizeof brackopen exp brackclose;

opsizeof = {byte} byte
	 | {word} word
	 | {dword} dword
	 | {empty}
	 ; 

exp = {plus}  exp plus exp1
    | {minus} exp minus exp1
    | {next}  exp1
    ;

exp1 = {times} exp1 times exp2
     | {next}  exp2
     ;

exp2 = {label} label
     | {numconst} numconst
     | {register} register
     ;

numconst = number;

register = {temp} prefix_register number 
         | {eax} eax
	 | {ebx} ebx
	 | {ecx} ecx
	 | {edx} edx
	 | {ebp} ebp
	 | {esp} esp
	 ;

oplabel = {label} label semicol
        | {empty}
        ;

label = id;
