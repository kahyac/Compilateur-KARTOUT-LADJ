Package c3aParser;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10 | 9)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);


co         = '[';
cf         = ']';
call       = 'call';
stop       = 'stop';
fbegin     = 'fbegin';
fend       = 'fend';
aff        = '=';
noteq      = '!=';
inf        = '<';
infeq      = '<=';
sup        = '>';
supeq      = '>=';
eq         = '==';
goto       = 'goto';
param      = 'param';
ret        = 'ret';
if         = 'if';
moins      = '-';
plus       = '+';
fois       = '*';
divise     = '/';
write      = 'write';
read       = 'read';
nombre  = chiffre+;
prefixe_temp = '@';
identif    = alpha alphanum*;


Ignored Tokens

espaces, commentaire;

Productions

prog = listeinst;

listeinst = {recursif} inst listeinst |
        {final} inst
	;

inst = {add}      add |
       {sub}      sub |
       {mul}      mul |
       {div}      div |
       {aff}      affect |
       {jmp}      jmp |
       {jmpeg}    jmpeg |
       {jmpneg}   jmpneg |
       {jmpinf}   jmpinf |
       {jminfeg}  jmpinfeg |
       {jmpsup}   jmpsup |
       {jmpsupeg} jmpsupeg |
       {fcall}    fcall |
       {iwrite}   iwrite |
       {iread}    iread |
       {arg}      arg |
       {return}   return |
       {begin}    begin |
       {end}      end |
       {stop}     istop
       ;
       
add      = etiqop [result]:tv aff [op1]:ctv plus   [op2]:ctv; 
sub      = etiqop [result]:tv aff [op1]:ctv moins  [op2]:ctv; 
mul      = etiqop [result]:tv aff [op1]:ctv fois   [op2]:ctv; 
div      = etiqop [result]:tv aff [op1]:ctv divise [op2]:ctv; 
affect   = etiqop [result]:tv aff [op1]:ctv;
jmpeg    = etiqop if [op1]:ctv eq   [op2]:ctv goto [result]:constante;
jmpneg   = etiqop if [op1]:ctv noteq [op2]:ctv goto [result]:constante;
jmpinf   = etiqop if [op1]:ctv inf   [op2]:ctv goto [result]:constante;
jmpinfeg = etiqop if [op1]:ctv infeq [op2]:ctv goto [result]:constante;
jmpsup   = etiqop if [op1]:ctv sup   [op2]:ctv goto [result]:constante;
jmpsupeg = etiqop if [op1]:ctv supeq [op2]:ctv goto [result]:constante;
jmp      = etiqop goto [result]:constante;
begin    = identif fbegin;
end      = etiqop fend;
fcall    = etiqop [result]:tv aff call identif;
iwrite   = etiqop write ctv;
iread    = etiqop [result]:tv aff read;
arg      = etiqop param ctv;
return   = etiqop ret ctv;
istop    = etiqop stop ctv;


ctv = {c} constante | {t} temporaire | {v} variable;
tv = {t} temporaire | {v} variable;

constante = nombre;

temporaire = prefixe_temp nombre;

variable = {scalaire} identif |
           {tab} identif co ctv cf
           ;

etiqop = {cte} nombre |
         {vide}
         ;
