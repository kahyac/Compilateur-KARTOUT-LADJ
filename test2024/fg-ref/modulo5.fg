0 : ( 1 )		sub	esp,	4	;allocation mémoire pour la valeur de retour
1 : ( 2 )		call	main
2 : ( 3 )		pop	@0	;récupération de la valeur de retour
3 : ( 4 )		mov	ebx,	0	; valeur de retour du programme
4 : ( 5 )		mov	eax,	1	; code de sortie
5 : ( 6 )		int 0x80
6 : ( 7 )	main :	push	ebp	;sauvegarde la valeur de ebp
7 : ( 8 )		mov	ebp,	esp	;nouvelle valeur de ebp
8 : ( 9 )		push	eax	;sauvegarde de eax
9 : ( 10 )		push	ebx	;sauvegarde de ebx
10 : ( 11 )		push	ecx	;sauvegarde de ecx
11 : ( 12 )		push	edx	;sauvegarde de edx
12 : ( 13 )		sub	esp,	0	;allocation des variables locales
13 : ( 14 )		mov	@10,	0
14 : ( 15 )		imul	@10,	4
15 : ( 16 )		mov	dword [t+@10],	3164	;Affect
16 : ( 17 )		mov	@11,	1
17 : ( 18 )		imul	@11,	4
18 : ( 19 )		mov	dword [t+@11],	152	;Affect
19 : ( 20 )		mov	@12,	1
20 : ( 21 )		imul	@12,	4
21 : ( 22 )		mov	edx,	0	;mise à 0 des bits de poids fort du dividende
22 : ( 23 )		mov	@15,	0
23 : ( 24 )		imul	@15,	4
24 : ( 25 )		mov	eax,	dword [t+@15]	;affectation des bits de poids faible du dividende
25 : ( 26 )		idiv	dword [t+@12]
26 : ( 27 )		mov	edx,	edx	;rend explicite l'utilisation de edx pour ne pas que sa valeur soit modifiée
27 : ( 28 )		mov	@1,	eax
28 : ( 29 )		mov	@17,	1
29 : ( 30 )		imul	@17,	4
30 : ( 31 )		mov	@2,	dword [t+@17]
31 : ( 32 )		imul	@2,	@1
32 : ( 33 )		mov	@18,	0
33 : ( 34 )		imul	@18,	4
34 : ( 35 )		mov	@3,	dword [t+@18]
35 : ( 36 )		sub	@3,	@2
36 : ( 37 )		mov	@19,	2
37 : ( 38 )		imul	@19,	4
38 : ( 39 )		mov	dword [t+@19],	@3	;Affect
39 : ( 40 )		mov	@21,	2
40 : ( 41 )		imul	@21,	4
41 : ( 42 )		mov	eax,	dword [t+@21]	;Write 1
42 : ( 43 )		call	iprintLF	;Write 2
43 : ( 44 )		add	esp,	0	;désallocation des variables locales
44 : ( 45 )		pop	edx	;restaure edx
45 : ( 46 )		pop	ecx	;restaure ecx
46 : ( 47 )		pop	ebx	;restaure ebx
47 : ( 48 )		pop	eax	;restaure eax
48 : ( 49 )		pop	ebp	;restaure la valeur de ebp
49 : ( )		ret
