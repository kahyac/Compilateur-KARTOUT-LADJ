iter num = 9
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	4	;allocation mémoire pour la valeur de retour
use = () def = ()	in = ()	 	out = ()	 		call	main
use = () def = (0 )	in = ()	 	out = ()	 		pop	@0	;récupération de la valeur de retour
use = () def = (3 )	in = ()	 	out = ()	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (4 )	in = ()	 	out = ()	 		mov	eax,	1	; code de sortie
use = () def = ()	in = ()	 	out = ()	 		int 0x80
use = () def = ()	in = ()	 	out = ()	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		push	eax	;sauvegarde de eax
use = () def = ()	in = ()	 	out = ()	 		push	ebx	;sauvegarde de ebx
use = () def = ()	in = ()	 	out = ()	 		push	ecx	;sauvegarde de ecx
use = () def = ()	in = ()	 	out = ()	 		push	edx	;sauvegarde de edx
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = (9 )	in = ()	 	out = (9 )	 		mov	@9,	1
use = (9 ) def = (9 )	in = (9 )	 	out = (9 )	 		imul	@9,	4
use = (9 ) def = ()	in = (9 )	 	out = ()	 		mov	dword [t+@9],	2	;Affect
use = () def = (10 )	in = ()	 	out = (10 )	 		mov	@10,	2
use = (10 ) def = (10 )	in = (10 )	 	out = (10 )	 		imul	@10,	4
use = (10 ) def = ()	in = (10 )	 	out = ()	 		mov	dword [t+@10],	3	;Affect
use = () def = (11 )	in = ()	 	out = (11 )	 		mov	@11,	3
use = (11 ) def = (11 )	in = (11 )	 	out = (11 )	 		imul	@11,	4
use = (11 ) def = ()	in = (11 )	 	out = ()	 		mov	dword [t+@11],	1	;Affect
use = () def = (12 )	in = ()	 	out = (12 )	 		mov	@12,	1
use = (12 ) def = (12 )	in = (12 )	 	out = (12 )	 		imul	@12,	4
use = (12 ) def = (1 )	in = (12 )	 	out = (1 )	 		mov	@1,	dword [t+@12]
use = () def = (13 )	in = (1 )	 	out = (1 13 )	 		mov	@13,	2
use = (13 ) def = (13 )	in = (1 13 )	 	out = (1 13 )	 		imul	@13,	4
use = (1 13 ) def = (1 )	in = (1 13 )	 	out = (1 )	 		imul	@1,	dword [t+@13]
use = () def = (14 )	in = (1 )	 	out = (1 14 )	 		mov	@14,	3
use = (14 ) def = (14 )	in = (1 14 )	 	out = (1 14 )	 		imul	@14,	4
use = (14 ) def = (2 )	in = (1 14 )	 	out = (1 2 )	 		mov	@2,	dword [t+@14]
use = (1 2 ) def = (2 )	in = (1 2 )	 	out = (2 )	 		add	@2,	@1
use = () def = (15 )	in = (2 )	 	out = (2 15 )	 		mov	@15,	3
use = (15 ) def = (15 )	in = (2 15 )	 	out = (2 15 )	 		imul	@15,	4
use = (2 15 ) def = ()	in = (2 15 )	 	out = ()	 		mov	dword [t+@15],	@2	;Affect
use = () def = (17 )	in = ()	 	out = (17 )	 		mov	@17,	3
use = (17 ) def = (17 )	in = (17 )	 	out = (17 )	 		imul	@17,	4
use = (17 ) def = (16 )	in = (17 )	 	out = ()	 		mov	eax,	dword [t+@17]	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;désallocation des variables locales
use = () def = (18 )	in = ()	 	out = ()	 		pop	edx	;restaure edx
use = () def = (19 )	in = ()	 	out = ()	 		pop	ecx	;restaure ecx
use = () def = (20 )	in = ()	 	out = ()	 		pop	ebx	;restaure ebx
use = () def = (21 )	in = ()	 	out = ()	 		pop	eax	;restaure eax
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret
