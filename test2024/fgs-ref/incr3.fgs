iter num = 7
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	4	;allocation mémoire pour la valeur de retour
use = () def = ()	in = ()	 	out = ()	 		call	main
use = () def = (0 )	in = ()	 	out = ()	 		pop	@0	;récupération de la valeur de retour
use = () def = (2 )	in = ()	 	out = ()	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (3 )	in = ()	 	out = ()	 		mov	eax,	1	; code de sortie
use = () def = ()	in = ()	 	out = ()	 		int 0x80
use = () def = ()	in = ()	 	out = ()	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		push	eax	;sauvegarde de eax
use = () def = ()	in = ()	 	out = ()	 		push	ebx	;sauvegarde de ebx
use = () def = ()	in = ()	 	out = ()	 		push	ecx	;sauvegarde de ecx
use = () def = ()	in = ()	 	out = ()	 		push	edx	;sauvegarde de edx
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = (8 )	in = ()	 	out = (8 )	 		mov	@8,	1
use = (8 ) def = (8 )	in = (8 )	 	out = (8 )	 		imul	@8,	4
use = (8 ) def = ()	in = (8 )	 	out = ()	 		mov	dword [t+@8],	100	;Affect
use = () def = (9 )	in = ()	 	out = (9 )	 		mov	@9,	1
use = (9 ) def = (9 )	in = (9 )	 	out = (9 )	 		imul	@9,	4
use = (9 ) def = (1 )	in = (9 )	 	out = (1 )	 		mov	@1,	dword [t+@9]
use = (1 ) def = (1 )	in = (1 )	 	out = (1 )	 		add	@1,	10
use = () def = (10 )	in = (1 )	 	out = (1 10 )	 		mov	@10,	1
use = (10 ) def = (10 )	in = (1 10 )	 	out = (1 10 )	 		imul	@10,	4
use = (1 10 ) def = ()	in = (1 10 )	 	out = ()	 		mov	dword [t+@10],	@1	;Affect
use = () def = (12 )	in = ()	 	out = (12 )	 		mov	@12,	1
use = (12 ) def = (12 )	in = (12 )	 	out = (12 )	 		imul	@12,	4
use = (12 ) def = (11 )	in = (12 )	 	out = ()	 		mov	eax,	dword [t+@12]	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;désallocation des variables locales
use = () def = (13 )	in = ()	 	out = ()	 		pop	edx	;restaure edx
use = () def = (14 )	in = ()	 	out = ()	 		pop	ecx	;restaure ecx
use = () def = (15 )	in = ()	 	out = ()	 		pop	ebx	;restaure ebx
use = () def = (16 )	in = ()	 	out = ()	 		pop	eax	;restaure eax
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret
