iter num = 42
use = () def = ()	in = (15 )	 	out = (15 )	 		sub	esp,	4	;allocation mémoire pour la valeur de retour
use = () def = ()	in = (15 )	 	out = (15 )	 		call	main
use = () def = (0 )	in = (15 )	 	out = (15 )	 		pop	@0	;récupération de la valeur de retour
use = () def = (6 )	in = (15 )	 	out = (15 )	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (7 )	in = (15 )	 	out = (15 )	 		mov	eax,	1	; code de sortie
use = () def = ()	in = (15 )	 	out = (15 )	 		int 0x80
use = () def = ()	in = (15 )	 	out = (15 )	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = (15 )	 	out = (15 )	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = (15 )	 	out = (15 )	 		push	eax	;sauvegarde de eax
use = () def = ()	in = (15 )	 	out = (15 )	 		push	ebx	;sauvegarde de ebx
use = () def = ()	in = (15 )	 	out = (15 )	 		push	ecx	;sauvegarde de ecx
use = () def = ()	in = (15 )	 	out = (15 )	 		push	edx	;sauvegarde de edx
use = () def = ()	in = (15 )	 	out = (15 )	 		sub	esp,	0	;allocation des variables locales
use = () def = (1 )	in = (15 )	 	out = (1 15 )	 		mov	@1,	2
use = (1 ) def = (1 )	in = (1 15 )	 	out = (1 15 )	 		imul	@1,	7
use = () def = (12 )	in = (1 15 )	 	out = (1 12 15 )	 		mov	edx,	0	;mise à 0 des bits de poids fort du dividende
use = (1 ) def = (13 )	in = (1 12 15 )	 	out = (1 12 15 )	 		mov	eax,	@1	;affectation des bits de poids faible du dividende
use = () def = (14 )	in = (1 12 15 )	 	out = (1 12 14 15 )	 		mov	@14,	5
use = (14 ) def = ()	in = (1 12 14 15 )	 	out = (1 12 15 )	 		idiv	@14
use = (12 ) def = (12 )	in = (1 12 15 )	 	out = (1 15 )	 		mov	edx,	edx	;rend explicite l'utilisation de edx pour ne pas que sa valeur soit modifiée
use = (15 ) def = (2 )	in = (1 15 )	 	out = (1 2 )	 		mov	@2,	eax
use = () def = (3 )	in = (1 2 )	 	out = (1 2 3 )	 		mov	@3,	5
use = (2 3 ) def = (3 )	in = (1 2 3 )	 	out = (1 3 )	 		imul	@3,	@2
use = (1 ) def = (4 )	in = (1 3 )	 	out = (3 4 )	 		mov	@4,	@1
use = (3 4 ) def = (4 )	in = (3 4 )	 	out = (4 )	 		sub	@4,	@3
use = (4 ) def = (5 )	in = (4 )	 	out = (5 )	 		mov	@5,	@4
use = (5 ) def = (5 )	in = (5 )	 	out = (5 )	 		add	@5,	5
use = (5 ) def = (16 )	in = (5 )	 	out = ()	 		mov	eax,	@5	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;désallocation des variables locales
use = () def = (17 )	in = ()	 	out = ()	 		pop	edx	;restaure edx
use = () def = (18 )	in = ()	 	out = ()	 		pop	ecx	;restaure ecx
use = () def = (19 )	in = ()	 	out = ()	 		pop	ebx	;restaure ebx
use = () def = (20 )	in = ()	 	out = ()	 		pop	eax	;restaure eax
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret
